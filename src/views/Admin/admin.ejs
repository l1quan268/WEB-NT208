<!DOCTYPE html>
<html lang="vi">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Admin Dashboard - SweetHome</title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
      rel="stylesheet"
    />
    <!-- Toastify CSS -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css"
    />

    <!-- Toastify JS -->
    <script src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <style>
      * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
      }

      body {
        font-family: "Segoe UI", Tahoma, Geneva, Verdana, sans-serif;
        background-color: #f8f9fa;
      }

      .admin-container {
        display: flex;
        min-height: 100vh;
      }

      /* Sidebar */
      .sidebar {
        width: 280px;
        background: linear-gradient(135deg, #2c3e50, #34495e);
        color: white;
        position: fixed;
        height: 100vh;
        overflow-y: auto;
        transition: all 0.3s ease;
        z-index: 1000;
        transform: translateX(-100%);
        /* Ẩn sidebar mặc định */
      }

      .sidebar.show {
        transform: translateX(0);
        /* Hiện sidebar khi có class show */
      }

      .sidebar-header {
        padding: 20px;
        background: rgba(0, 0, 0, 0.1);
        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
      }

      .sidebar-header h3 {
        color: #3498db;
        font-weight: bold;
        margin: 0;
      }

      .sidebar-menu {
        list-style: none;
        padding: 20px 0;
      }

      .sidebar-menu li {
        margin: 0;
      }

      .sidebar-menu a {
        display: flex;
        align-items: center;
        padding: 15px 25px;
        color: #ecf0f1;
        text-decoration: none;
        transition: all 0.3s ease;
        border-left: 3px solid transparent;
      }

      .sidebar-menu a:hover,
      .sidebar-menu a.active {
        background: rgba(52, 152, 219, 0.2);
        border-left-color: #3498db;
        color: white;
      }

      .sidebar-menu i {
        margin-right: 12px;
        width: 20px;
        text-align: center;
      }

      /* Main Content */
      .main-content {
        flex: 1;
        margin-left: 0;
        /* Bỏ margin-left mặc định */
        background-color: #f8f9fa;
        transition: margin-left 0.3s ease;
      }

      .main-content.sidebar-open {
        margin-left: 280px;
        /* Thêm margin khi sidebar mở */
      }

      .top-navbar {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        padding: 15px 30px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      }

      .top-navbar .navbar-brand {
        font-size: 1.5rem;
        font-weight: bold;
        color: white;
        display: flex;
        align-items: center;
      }

      .sidebar-toggle {
        background: rgba(255, 255, 255, 0.2);
        border: none;
        color: white;
        padding: 8px 12px;
        border-radius: 5px;
        margin-right: 15px;
        cursor: pointer;
        transition: all 0.3s ease;
      }

      .sidebar-toggle:hover {
        background: rgba(255, 255, 255, 0.3);
        transform: scale(1.05);
      }

      .sidebar-toggle i {
        font-size: 1.2rem;
      }

      .user-info {
        display: flex;
        align-items: center;
        gap: 10px;
      }

      .content-area {
        padding: 30px;
      }

      .page-header {
        background: white;
        padding: 20px 30px;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        margin-bottom: 30px;
      }

      .page-header h2 {
        color: #2c3e50;
        margin: 0;
        font-weight: 600;
      }

      .breadcrumb {
        background: none;
        padding: 0;
        margin: 5px 0 0 0;
      }

      /* Cards */
      .stats-card {
        background: white;
        border-radius: 10px;
        padding: 25px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
        border-left: 4px solid #3498db;
        transition: transform 0.2s ease;
      }

      .stats-card:hover {
        transform: translateY(-2px);
      }

      .stats-card .icon {
        width: 60px;
        height: 60px;
        background: linear-gradient(135deg, #3498db, #2980b9);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        color: white;
        font-size: 1.5rem;
        margin-bottom: 15px;
      }

      .stats-card h3 {
        color: #2c3e50;
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 5px;
      }

      .stats-card p {
        color: #7f8c8d;
        margin: 0;
      }

      .stats-card small {
        color: #95a5a6;
        font-size: 0.8rem;
        display: block;
        margin-top: 5px;
      }

      /* Table */
      .table-container {
        background: white;
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
      }

      .table-header {
        background: linear-gradient(135deg, #3498db, #2980b9);
        color: white;
        padding: 20px 30px;
      }

      .table-header h4 {
        margin: 0;
        font-weight: 600;
      }

      .table {
        margin: 0;
      }

      .table th {
        background: #f8f9fa;
        border: none;
        padding: 15px;
        font-weight: 600;
        color: #2c3e50;
      }

      .table td {
        padding: 15px;
        border: none;
        border-bottom: 1px solid #ecf0f1;
      }

      .btn-action {
        padding: 5px 10px;
        margin: 0 2px;
        border-radius: 5px;
        font-size: 0.8rem;
        text-decoration: none;
        transition: all 0.2s ease;
      }

      .btn-edit {
        background: #f39c12;
        color: white;
      }

      .btn-edit:hover {
        background: #e67e22;
        color: white;
      }

      .btn-delete {
        background: #e74c3c;
        color: white;
      }

      .btn-delete:hover {
        background: #c0392b;
        color: white;
      }

      .btn-view {
        background: #3498db;
        color: white;
      }

      .btn-view:hover {
        background: #2980b9;
        color: white;
      }

      /* ============================================
       RESPONSIVE DESIGN - MOBILE FIRST APPROACH
    ============================================ */

      /* ============ MOBILE PHONES (320px - 767px) ============ */
      @media (max-width: 767px) {
        .table th,
        .table td {
          padding: 6px 3px;
          font-size: 0.7rem;
          white-space: nowrap;
        }

        /* Ẩn một số cột trên mobile để tiết kiệm không gian */
        .table th:nth-child(4),
      /* Cột Phòng */
      .table td:nth-child(4) {
          display: none;
        }

        .table th:nth-child(5),
      /* Cột Ngày đặt */
      .table td:nth-child(5) {
          display: none;
        }

        .sidebar {
          width: 100%;
          transform: translateX(-100%);
          box-shadow: 2px 0 20px rgba(0, 0, 0, 0.3);
        }

        .sidebar.show {
          transform: translateX(0);
        }

        .main-content {
          margin-left: 0 !important;
        }

        .content-area {
          padding: 15px;
        }

        .top-navbar {
          padding: 10px 15px;
          flex-wrap: wrap;
        }

        .top-navbar .navbar-brand {
          font-size: 1.1rem;
        }

        .sidebar-toggle {
          padding: 6px 10px;
          margin-right: 10px;
        }

        .sidebar-toggle i {
          font-size: 1rem;
        }

        .user-info {
          gap: 5px;
          order: 3;
          width: 100%;
          justify-content: center;
          margin-top: 10px;
        }

        .user-info i {
          font-size: 1.5rem !important;
        }

        .user-info span {
          font-size: 0.9rem;
        }

        .page-header {
          padding: 15px;
          margin-bottom: 20px;
        }

        .page-header h2 {
          font-size: 1.4rem;
        }

        .breadcrumb {
          font-size: 0.8rem;
        }

        /* Stats Cards on Mobile */
        .stats-card {
          padding: 15px;
          margin-bottom: 15px;
          text-align: center;
        }

        .stats-card .icon {
          width: 45px;
          height: 45px;
          font-size: 1.1rem;
          margin: 0 auto 10px;
        }

        .stats-card h3 {
          font-size: 1.4rem;
        }

        .stats-card p {
          font-size: 0.85rem;
        }

        .stats-card small {
          font-size: 0.75rem;
        }

        /* Table on Mobile */
        .table-header {
          padding: 15px !important;
          flex-direction: column !important;
          gap: 10px;
          text-align: center;
        }

        .table-header h4 {
          font-size: 1rem;
        }

        .table-header .d-flex {
          flex-direction: column !important;
          align-items: center !important;
        }

        .table-header div {
          display: flex;
          flex-direction: column;
          gap: 10px;
          width: 100%;
        }

        .table {
          font-size: 0.75rem;
        }

        .table th,
        .table td {
          padding: 8px 4px;
          white-space: nowrap;
        }

        .btn-action {
          padding: 4px 6px;
          font-size: 0.65rem;
          margin: 1px;
          display: inline-block;
        }

        .form-select-sm {
          font-size: 0.75rem;
          padding: 4px 8px;
          width: 100% !important;
          margin-bottom: 10px;
        }

        /* Horizontal scroll for tables */
        .table-responsive {
          border: 1px solid #dee2e6;
          border-radius: 5px;
          max-height: 400px;
          overflow-y: auto;
        }

        /* Modal on Mobile */
        .modal-dialog {
          margin: 10px;
          max-width: calc(100% - 20px);
        }

        .modal-body {
          padding: 15px;
        }

        .modal-header {
          padding: 10px 15px;
        }

        .modal-footer {
          padding: 10px 15px;
          flex-direction: column;
        }

        .modal-footer button {
          width: 100%;
          margin-bottom: 5px;
        }

        /* Grid adjustments */
        .col-lg-3,
        .col-md-6 {
          padding: 0 7px;
        }

        .row {
          margin: 0 -7px;
        }
      }

      /* ============ SMALL MOBILE (320px - 480px) ============ */
      @media (max-width: 480px) {
        /* Trên mobile nhỏ, chỉ hiển thị các cột quan trọng nhất */
        .table th:nth-child(3),
      /* Cột Khách hàng */
      .table td:nth-child(3) {
          display: none;
        }

        .top-navbar .navbar-brand {
          font-size: 1rem;
        }

        .sidebar-toggle {
          padding: 5px 8px;
        }

        .stats-card {
          padding: 12px 8px;
        }

        .stats-card h3 {
          font-size: 1.2rem;
        }

        .stats-card p {
          font-size: 0.8rem;
        }

        .table th,
        .table td {
          padding: 6px 3px;
          font-size: 0.7rem;
        }

        .btn-action {
          padding: 3px 5px;
          font-size: 0.6rem;
        }

        .page-header {
          padding: 12px;
        }

        .page-header h2 {
          font-size: 1.2rem;
        }

        .content-area {
          padding: 10px;
        }
      }

      /* ============ TABLETS - iPAD PORTRAIT (768px - 1024px) ============ */
      @media (min-width: 768px) and (max-width: 1024px) {
        .sidebar {
          width: 260px;
          transform: translateX(-100%);
          box-shadow: 3px 0 15px rgba(0, 0, 0, 0.2);
        }

        .sidebar.show {
          transform: translateX(0);
        }

        .main-content {
          margin-left: 0;
          transition: margin-left 0.3s ease;
        }

        .main-content.sidebar-open {
          margin-left: 260px;
        }

        .content-area {
          padding: 25px;
        }

        .top-navbar {
          padding: 12px 25px;
        }

        .top-navbar .navbar-brand {
          font-size: 1.3rem;
        }

        .sidebar-toggle {
          min-width: 44px;
          min-height: 44px;
          padding: 10px;
        }

        .user-info {
          gap: 8px;
        }

        .stats-card {
          padding: 20px;
        }

        .stats-card .icon {
          width: 55px;
          height: 55px;
          font-size: 1.3rem;
        }

        .stats-card h3 {
          font-size: 1.8rem;
        }

        .table-header {
          padding: 18px 25px;
        }

        .table th,
        .table td {
          padding: 12px;
        }

        /* Better touch targets for iPad */
        .btn-action {
          padding: 8px 12px;
          font-size: 0.85rem;
          margin: 0 3px;
          min-width: 44px;
          min-height: 44px;
          display: inline-flex;
          align-items: center;
          justify-content: center;
        }

        .form-select {
          min-height: 44px;
          font-size: 0.9rem;
        }

        .sidebar-menu a {
          padding: 18px 25px;
          min-height: 54px;
          font-size: 0.95rem;
        }

        .sidebar-menu i {
          font-size: 1.1rem;
        }

        /* Table responsive on iPad */
        .table-responsive {
          overflow-x: auto;
          -webkit-overflow-scrolling: touch;
        }

        /* Modal on iPad */
        .modal-dialog {
          max-width: 600px;
        }
      }

      /* ============ iPAD LANDSCAPE & SMALL LAPTOPS (1025px - 1366px) ============ */
      @media (min-width: 1025px) and (max-width: 1366px) {
        .sidebar {
          width: 270px;
          transform: translateX(-100%);
        }

        .sidebar.show {
          transform: translateX(0);
        }

        .main-content {
          margin-left: 0;
        }

        .main-content.sidebar-open {
          margin-left: 270px;
        }

        .content-area {
          padding: 28px;
        }

        .top-navbar {
          padding: 14px 28px;
        }

        .stats-card {
          padding: 22px;
        }

        .stats-card .icon {
          width: 58px;
          height: 58px;
        }

        .table-header {
          padding: 19px 28px;
        }

        .btn-action {
          padding: 6px 12px;
          font-size: 0.8rem;
        }
      }

      /* ============ LARGE LAPTOPS & DESKTOPS (1367px+) ============ */
      @media (min-width: 1367px) {
        .sidebar {
          width: 280px;
          transform: translateX(-100%);
        }

        .sidebar.show {
          transform: translateX(0);
        }

        .main-content {
          margin-left: 0;
        }

        .main-content.sidebar-open {
          margin-left: 280px;
        }

        .content-area {
          padding: 30px;
        }

        .stats-card {
          padding: 25px;
        }

        .stats-card .icon {
          width: 60px;
          height: 60px;
        }

        .table-header {
          padding: 20px 30px;
        }

        .btn-action {
          padding: 5px 10px;
          font-size: 0.8rem;
        }
      }

      /* ============ LANDSCAPE ORIENTATION ADJUSTMENTS ============ */
      @media (orientation: landscape) and (max-height: 600px) {
        .sidebar-header {
          padding: 15px 20px;
        }

        .sidebar-header h3 {
          font-size: 1.1rem;
        }

        .sidebar-menu {
          padding: 10px 0;
        }

        .sidebar-menu a {
          padding: 12px 25px;
          font-size: 0.9rem;
        }

        .stats-card {
          padding: 15px;
        }

        .stats-card .icon {
          width: 40px;
          height: 40px;
          font-size: 1.1rem;
          margin-bottom: 8px;
        }

        .stats-card h3 {
          font-size: 1.4rem;
        }
      }

      /* ============ ACCESSIBILITY IMPROVEMENTS ============ */
      @media (prefers-reduced-motion: reduce) {
        .sidebar,
        .main-content,
        .stats-card,
        .btn-action,
        .sidebar-toggle {
          transition: none;
        }
      }

      /* Focus states for better accessibility */
      .btn-action:focus,
      .sidebar-toggle:focus {
        outline: 2px solid #3498db;
        outline-offset: 2px;
      }

      .sidebar-menu a:focus {
        outline: 2px solid #3498db;
        outline-offset: -2px;
      }

      .content-section {
        display: none;
      }

      .content-section.active {
        display: block;
      }

      /* Overlay cho mobile */
      .sidebar-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: rgba(0, 0, 0, 0.5);
        z-index: 999;
        opacity: 0;
        transition: opacity 0.3s ease;
      }

      .sidebar-overlay.show {
        display: block;
        opacity: 1;
      }

      @media (max-width: 768px) {
        .sidebar-overlay.show {
          display: block;
        }
      }

      .loading {
        text-align: center;
        padding: 50px;
      }

      .pagination {
        margin-top: 20px;
      }
    </style>
  </head>

  <body>
    <div class="admin-container">
      <!-- Overlay cho mobile -->
      <div class="sidebar-overlay" id="sidebarOverlay"></div>

      <!-- Sidebar -->
      <nav class="sidebar">
        <div class="sidebar-header">
          <h3><i class="fas fa-home"></i> SweetHome Admin</h3>
        </div>
        <ul class="sidebar-menu">
          <li>
            <a href="#" class="menu-link active" data-section="dashboard">
              <i class="fas fa-tachometer-alt"></i>
              <span>Dashboard</span>
            </a>
          </li>
          <li>
            <a href="#" class="menu-link" data-section="users">
              <i class="fas fa-users"></i>
              <span>Quản lý tài khoản</span>
            </a>
          </li>
          <li>
            <a href="#" class="menu-link" data-section="homestays">
              <i class="fas fa-home"></i>
              <span>Quản lý Homestay</span>
            </a>
          </li>
          <li>
            <a href="#" class="menu-link" data-section="rooms">
              <i class="fas fa-bed"></i>
              <span>Quản lý phòng</span>
            </a>
          </li>
          <li>
            <a href="#" class="menu-link" data-section="bookings">
              <i class="fas fa-calendar-alt"></i>
              <span>Quản lý hóa đơn</span>
            </a>
          </li>

          <li>
            <a href="#" class="menu-link" data-section="services">
              <i class="fas fa-concierge-bell"></i>
              <span>Quản lý dịch vụ</span>
            </a>
          </li>
          <li>
            <a href="/" class="menu-link">
              <i class="fas fa-arrow-left"></i>
              <span>Trở về trang chủ</span>
            </a>
          </li>
          <li>
            <a href="/logout" class="menu-link">
              <i class="fas fa-sign-out-alt"></i>
              <span>Đăng xuất</span>
            </a>
          </li>
        </ul>
      </nav>

      <!-- Main Content -->
      <div class="main-content">
        <!-- Top Navbar -->
        <nav
          class="top-navbar d-flex justify-content-between align-items-center"
        >
          <div class="navbar-brand">
            <button class="sidebar-toggle" id="sidebarToggle">
              <i class="fas fa-bars"></i>
            </button>
            Admin Panel
          </div>
          <div class="user-info">
            <i class="fas fa-user-circle fa-2x"></i>
            <span> <%= adminUser ? adminUser.name : 'Admin' %> </span>
          </div>
        </nav>

        <!-- Content Area -->
        <div class="content-area">
          <!-- Dashboard Section -->
          <div class="content-section active" id="dashboard">
            <div class="page-header">
              <h2>Dashboard</h2>
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item active">Dashboard</li>
                </ol>
              </nav>
            </div>

            <div class="row mb-4">
              <div class="col-lg-3 col-md-6 mb-4">
                <div class="stats-card">
                  <div class="icon">
                    <i class="fas fa-users"></i>
                  </div>
                  <h3><%= stats.totalUsers %></h3>
                  <p>Tổng người dùng</p>
                </div>
              </div>
              <div class="col-lg-3 col-md-6 mb-4">
                <div class="stats-card">
                  <div class="icon">
                    <i class="fas fa-home"></i>
                  </div>
                  <h3><%= stats.totalHomestays %></h3>
                  <p>Tổng Homestay</p>
                </div>
              </div>
              <div class="col-lg-3 col-md-6 mb-4">
                <div class="stats-card">
                  <div class="icon">
                    <i class="fas fa-calendar-alt"></i>
                  </div>
                  <h3><%= stats.totalBookings %></h3>
                  <p>Tổng đặt phòng</p>
                  <small class="text-muted">
                    (<%= stats.paidBookings || 0 %> đã thanh toán, <%=
                    stats.pendingBookings || 0 %> chờ thanh toán)
                  </small>
                </div>
              </div>
              <div class="col-lg-3 col-md-6 mb-4">
                <div class="stats-card">
                  <div class="icon">
                    <i class="fas fa-dollar-sign"></i>
                  </div>
                  <h3>
                    <%= Math.round((stats.totalRevenue || 0) / 1000000 * 10) /
                    10 %>M
                  </h3>
                  <p>Doanh thu (VND)</p>
                  <small class="text-muted">
                    Chỉ tính booking đã thanh toán
                  </small>
                </div>
              </div>
            </div>

            <!-- Thêm hàng thống kê chi tiết -->
            <div class="row mb-4">
              <div class="col-lg-6 col-md-6 mb-4">
                <div class="stats-card" style="border-left-color: #27ae60">
                  <div
                    class="icon"
                    style="
                      background: linear-gradient(135deg, #27ae60, #2ecc71);
                    "
                  >
                    <i class="fas fa-calendar-day"></i>
                  </div>
                  <h3>
                    <%= new Intl.NumberFormat('vi-VN').format(stats.todayRevenue
                    || 0) %>
                  </h3>
                  <p>Doanh thu hôm nay (VND)</p>
                </div>
              </div>
              <div class="col-lg-6 col-md-6 mb-4">
                <div class="stats-card" style="border-left-color: #e67e22">
                  <div
                    class="icon"
                    style="
                      background: linear-gradient(135deg, #e67e22, #f39c12);
                    "
                  >
                    <i class="fas fa-calendar-alt"></i>
                  </div>
                  <h3>
                    <%= new Intl.NumberFormat('vi-VN').format(stats.monthRevenue
                    || 0) %>
                  </h3>
                  <p>Doanh thu tháng này (VND)</p>
                </div>
              </div>
            </div>

            <!-- Recent Bookings -->
            <div class="table-container">
              <div class="table-header">
                <h4>Đặt phòng gần đây</h4>
              </div>
              <div class="table-responsive">
                <table class="table">
                  <thead>
                    <tr>
                      <th>ID</th>
                      <th>Khách hàng</th>
                      <th>Phòng</th>
                      <th>Ngày đặt</th>
                      <th>Tổng tiền</th>
                      <th>Trạng thái</th>
                    </tr>
                  </thead>
                  <tbody>
                    <% if (recentBookings && recentBookings.length> 0) { %> <%
                    recentBookings.forEach((booking)=> { %>
                    <tr>
                      <td><%= booking.booking_id %></td>
                      <td><%= booking.User?.name || booking.name %></td>
                      <td><%= booking.RoomType?.type_name || 'N/A' %></td>
                      <td>
                        <%= new
                        Date(booking.booking_date).toLocaleDateString('vi-VN')
                        %>
                      </td>
                      <td>
                        <%= new
                        Intl.NumberFormat('vi-VN').format(booking.total_price)
                        %> VND
                      </td>

                      <td>
                        <% if (booking.payment_status==='paid' ) { %>
                        <span class="badge bg-success">Đã thanh toán</span>
                        <% } else if (booking.payment_status==='pending' ) { %>
                        <span class="badge bg-warning">Chờ thanh toán</span>
                        <% } else if (booking.payment_status==='failed' ) { %>
                        <span class="badge bg-danger">Thất bại</span>
                        <% } else { %>
                        <span class="badge bg-secondary">
                          <%= booking.payment_status %>
                        </span>
                        <% } %>
                      </td>
                    </tr>
                    <% }); %> <% } else { %>
                    <tr>
                      <td colspan="8" class="text-center">
                        Chưa có đặt phòng nào
                      </td>
                    </tr>
                    <% } %>
                  </tbody>
                </table>
              </div>
            </div>
          </div>

          <!-- Users Section -->
          <div class="content-section" id="users">
            <div class="page-header">
              <h2>Quản lý tài khoản</h2>
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item">
                    <a href="#" class="menu-link" data-section="dashboard"
                      >Dashboard</a
                    >
                  </li>
                  <li class="breadcrumb-item active">Quản lý tài khoản</li>
                </ol>
              </nav>
            </div>

            <div class="table-container">
              <div
                class="table-header d-flex justify-content-between align-items-center"
              >
                <h4>Danh sách tài khoản</h4>
                <div>
                  <button
                    class="btn btn-success btn-sm me-2"
                    onclick="showCreateUserModal()"
                  >
                    <i class="fas fa-plus"></i> Tạo tài khoản
                  </button>
                  <button class="btn btn-light btn-sm" onclick="refreshUsers()">
                    <i class="fas fa-refresh"></i> Tải lại
                  </button>
                </div>
              </div>
              <div id="users-content">
                <div class="loading">
                  <i class="fas fa-spinner fa-spin"></i> Đang tải...
                </div>
              </div>
            </div>
          </div>

          <!-- Homestays Section -->
          <div class="content-section" id="homestays">
            <div class="page-header">
              <h2>Quản lý Homestay</h2>
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item">
                    <a href="#" class="menu-link" data-section="dashboard"
                      >Dashboard</a
                    >
                  </li>
                  <li class="breadcrumb-item active">Quản lý Homestay</li>
                </ol>
              </nav>
            </div>

            <div class="table-container">
              <div
                class="table-header d-flex justify-content-between align-items-center"
              >
                <h4>Danh sách Homestay</h4>
                <div>
                  <button
                    class="btn btn-success btn-sm me-2"
                    onclick="showCreateHomestayModal()"
                  >
                    <i class="fas fa-plus"></i> Thêm homestay
                  </button>
                  <button
                    class="btn btn-light btn-sm"
                    onclick="refreshHomestays()"
                  >
                    <i class="fas fa-refresh"></i> Tải lại
                  </button>
                </div>
              </div>
              <div id="homestays-content">
                <div class="loading">
                  <i class="fas fa-spinner fa-spin"></i> Đang tải...
                </div>
              </div>
            </div>
          </div>

          <!-- Rooms Section -->
          <div class="content-section" id="rooms">
            <div class="page-header">
              <h2>Quản lý phòng</h2>
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item">
                    <a href="#" class="menu-link" data-section="dashboard"
                      >Dashboard</a
                    >
                  </li>
                  <li class="breadcrumb-item active">Quản lý phòng</li>
                </ol>
              </nav>
            </div>

            <div class="table-container">
              <div
                class="table-header d-flex justify-content-between align-items-center"
              >
                <h4>Danh sách phòng</h4>
                <div>
                  <button
                    class="btn btn-success btn-sm me-2"
                    onclick="showCreateRoomModal()"
                  >
                    <i class="fas fa-plus"></i> Thêm phòng
                  </button>
                  <button class="btn btn-light btn-sm" onclick="refreshRooms()">
                    <i class="fas fa-refresh"></i> Tải lại
                  </button>
                </div>
              </div>
              <div id="rooms-content">
                <div class="loading">
                  <i class="fas fa-spinner fa-spin"></i> Đang tải...
                </div>
              </div>
            </div>
          </div>

          <!-- Bookings Section -->
          <div class="content-section" id="bookings">
            <div class="page-header">
              <h2>Quản lý hóa đơn</h2>
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item">
                    <a href="#" class="menu-link" data-section="dashboard"
                      >Dashboard</a
                    >
                  </li>
                  <li class="breadcrumb-item active">Quản lý hóa đơn</li>
                </ol>
              </nav>
            </div>

            <div class="table-container">
              <div
                class="table-header d-flex justify-content-between align-items-center"
              >
                <h4>Danh sách hóa đơn</h4>
                <div>
                  <select
                    class="form-select form-select-sm me-2"
                    id="bookingStatusFilter"
                    onchange="refreshBookings()"
                  >
                    <option value="all">Tất cả</option>
                    <option value="pending">Chờ xử lý</option>
                    <option value="paid">Hoàn thành</option>
                    <option value="failed">Đã hủy</option>
                  </select>
                  <button
                    class="btn btn-success btn-sm me-2"
                    onclick="showCreateBookingModal()"
                  >
                    <i class="fas fa-plus"></i> Tạo hóa đơn
                  </button>
                  <button
                    class="btn btn-light btn-sm"
                    onclick="refreshBookings()"
                  >
                    <i class="fas fa-refresh"></i> Tải lại
                  </button>
                </div>
              </div>
              <div id="bookings-content">
                <div class="loading">
                  <i class="fas fa-spinner fa-spin"></i> Đang tải...
                </div>
              </div>
            </div>
          </div>

          <!-- Reviews Section -->
          <div class="content-section" id="reviews">
            <div class="page-header">
              <h2>Quản lý đánh giá</h2>
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item">
                    <a href="#" class="menu-link" data-section="dashboard"
                      >Dashboard</a
                    >
                  </li>
                  <li class="breadcrumb-item active">Quản lý đánh giá</li>
                </ol>
              </nav>
            </div>

            <div class="table-container">
              <div
                class="table-header d-flex justify-content-between align-items-center"
              >
                <h4>Danh sách đánh giá</h4>
                <button class="btn btn-light btn-sm" onclick="refreshReviews()">
                  <i class="fas fa-refresh"></i> Tải lại
                </button>
              </div>
              <div id="reviews-content">
                <div class="loading">
                  <i class="fas fa-spinner fa-spin"></i> Đang tải...
                </div>
              </div>
            </div>
          </div>

          <!-- Services Section -->
          <div class="content-section" id="services">
            <div class="page-header">
              <h2>Quản lý dịch vụ</h2>
              <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                  <li class="breadcrumb-item">
                    <a href="#" class="menu-link" data-section="dashboard"
                      >Dashboard</a
                    >
                  </li>
                  <li class="breadcrumb-item active">Quản lý dịch vụ</li>
                </ol>
              </nav>
            </div>

            <div class="table-container">
              <div
                class="table-header d-flex justify-content-between align-items-center"
              >
                <h4>Danh sách dịch vụ</h4>
                <button
                  class="btn btn-light btn-sm"
                  onclick="showAddServiceModal()"
                >
                  <i class="fas fa-plus"></i> Thêm mới
                </button>
              </div>
              <div id="services-content">
                <div class="loading">
                  <i class="fas fa-spinner fa-spin"></i> Đang tải...
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Create User Modal -->
    <div class="modal fade" id="createUserModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-user-plus me-2"></i>Tạo tài khoản mới
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <form id="createUserForm">
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createUserName" class="form-label">
                      Họ tên <span class="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      class="form-control"
                      id="createUserName"
                      required
                    />
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createUserEmail" class="form-label">
                      Email <span class="text-danger">*</span>
                    </label>
                    <input
                      type="email"
                      class="form-control"
                      id="createUserEmail"
                      required
                    />
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createUserPassword" class="form-label">
                      Mật khẩu <span class="text-danger">*</span>
                    </label>
                    <input
                      type="password"
                      class="form-control"
                      id="createUserPassword"
                      required
                      minlength="6"
                    />
                    <div class="form-text">Tối thiểu 6 ký tự</div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createUserPhone" class="form-label"
                      >Số điện thoại</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="createUserPhone"
                    />
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createUserGender" class="form-label"
                      >Giới tính</label
                    >
                    <select class="form-select" id="createUserGender">
                      <option value="">-- Chọn giới tính --</option>
                      <option value="male">Nam</option>
                      <option value="female">Nữ</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createUserDob" class="form-label"
                      >Ngày sinh</label
                    >
                    <input
                      type="date"
                      class="form-control"
                      id="createUserDob"
                    />
                  </div>
                </div>
              </div>

              <div class="mb-3">
                <label for="createUserRole" class="form-label">
                  Vai trò <span class="text-danger">*</span>
                </label>
                <select class="form-select" id="createUserRole" required>
                  <option value="">-- Chọn vai trò --</option>
                  <option value="user">Người dùng</option>
                  <option value="admin">Quản trị viên</option>
                </select>
              </div>

              <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                <strong>Lưu ý:</strong> Tài khoản mới sẽ được tạo với mật khẩu
                mà bạn đã nhập. Người dùng có thể đổi mật khẩu sau khi đăng
                nhập.
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              <i class="fas fa-times me-2"></i>Hủy
            </button>
            <button
              type="button"
              class="btn btn-success"
              onclick="createUser()"
            >
              <i class="fas fa-plus me-2"></i>Tạo tài khoản
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Homestay Modal -->
    <div class="modal fade" id="createHomestayModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-home me-2"></i>Thêm homestay mới
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <form id="createHomestayForm">
              <div class="mb-3">
                <label for="createHomestayName" class="form-label">
                  Tên homestay <span class="text-danger">*</span>
                </label>
                <input
                  type="text"
                  class="form-control"
                  id="createHomestayName"
                  required
                  placeholder="Nhập tên homestay"
                />
              </div>

              <div class="mb-3">
                <label for="createHomestayDescription" class="form-label">
                  Mô tả <span class="text-danger">*</span>
                </label>
                <textarea
                  class="form-control"
                  id="createHomestayDescription"
                  rows="4"
                  required
                  placeholder="Mô tả chi tiết về homestay"
                ></textarea>
              </div>

              <div class="mb-3">
                <label for="createHomestayAddress" class="form-label">
                  Địa chỉ <span class="text-danger">*</span>
                </label>
                <input
                  type="text"
                  class="form-control"
                  id="createHomestayAddress"
                  required
                  placeholder="Địa chỉ đầy đủ"
                />
              </div>

              <div class="mb-3">
                <label for="createHomestayThumbnail" class="form-label"
                  >URL ảnh đại diện</label
                >
                <input
                  type="url"
                  class="form-control"
                  id="createHomestayThumbnail"
                  placeholder="https://example.com/image.jpg"
                />
                <div class="form-text">Để trống nếu chưa có ảnh</div>
              </div>

              <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                <strong>Lưu ý:</strong> Sau khi tạo homestay, bạn có thể thêm
                các loại phòng trong phần "Quản lý phòng".
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              <i class="fas fa-times me-2"></i>Hủy
            </button>
            <button
              type="button"
              class="btn btn-success"
              onclick="createHomestay()"
            >
              <i class="fas fa-plus me-2"></i>Tạo homestay
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Booking Modal -->
    <div class="modal fade" id="createBookingModal" tabindex="-1">
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-calendar-plus me-2"></i>Tạo hóa đơn mới
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <form id="createBookingForm">
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createBookingUser" class="form-label">
                      Người dùng <span class="text-danger">*</span>
                    </label>
                    <select class="form-select" id="createBookingUser" required>
                      <option value="">-- Chọn người dùng --</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createBookingHomestay" class="form-label">
                      Homestay <span class="text-danger">*</span>
                    </label>
                    <select
                      class="form-select"
                      id="createBookingHomestay"
                      required
                      onchange="loadRoomsForHomestay()"
                    >
                      <option value="">-- Chọn homestay --</option>
                    </select>
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-12">
                  <div class="mb-3">
                    <label for="createBookingRoom" class="form-label">
                      Loại phòng <span class="text-danger">*</span>
                    </label>
                    <select
                      class="form-select"
                      id="createBookingRoom"
                      required
                      onchange="updateRoomInfo()"
                      disabled
                    >
                      <option value="">-- Chọn homestay trước --</option>
                    </select>
                    <div class="form-text" id="roomInfoText"></div>
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createBookingName" class="form-label">
                      Tên người đặt <span class="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      class="form-control"
                      id="createBookingName"
                      required
                    />
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createBookingDate" class="form-label">
                      Ngày đặt <span class="text-danger">*</span>
                    </label>
                    <input
                      type="date"
                      class="form-control"
                      id="createBookingDate"
                      required
                    />
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createBookingCheckin" class="form-label">
                      Ngày nhận phòng <span class="text-danger">*</span>
                    </label>
                    <input
                      type="date"
                      class="form-control"
                      id="createBookingCheckin"
                      required
                      onchange="calculateTotal()"
                    />
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createBookingCheckout" class="form-label">
                      Ngày trả phòng <span class="text-danger">*</span>
                    </label>
                    <input
                      type="date"
                      class="form-control"
                      id="createBookingCheckout"
                      required
                      onchange="calculateTotal()"
                    />
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="createBookingAdults" class="form-label">
                      Người lớn <span class="text-danger">*</span>
                    </label>
                    <input
                      type="number"
                      class="form-control"
                      id="createBookingAdults"
                      min="1"
                      required
                      onchange="validateGuestsAndCalculate()"
                    />
                    <div class="form-text" id="adultsLimitText"></div>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="createBookingChildren" class="form-label"
                      >Trẻ em</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      id="createBookingChildren"
                      min="0"
                      value="0"
                      onchange="validateGuestsAndCalculate()"
                    />
                    <div class="form-text" id="childrenLimitText"></div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createBookingPrice" class="form-label">
                      Tổng tiền <span class="text-danger">*</span>
                    </label>
                    <div class="input-group">
                      <input
                        type="number"
                        class="form-control"
                        id="createBookingPrice"
                        required
                        readonly
                      />
                      <span class="input-group-text">VND</span>
                    </div>
                    <div class="form-text" id="priceBreakdown"></div>
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="createBookingEmail" class="form-label"
                      >Email khách</label
                    >
                    <input
                      type="email"
                      class="form-control"
                      id="createBookingEmail"
                    />
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="createBookingPhone" class="form-label"
                      >Số điện thoại</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="createBookingPhone"
                    />
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="createBookingAddress" class="form-label"
                      >Địa chỉ</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="createBookingAddress"
                    />
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createBookingPaymentMethod" class="form-label">
                      Phương thức thanh toán <span class="text-danger">*</span>
                    </label>
                    <select
                      class="form-select"
                      id="createBookingPaymentMethod"
                      required
                    >
                      <option value="cash">Tiền mặt</option>
                      <option value="vnpay">VNPay</option>
                      <option value="momo">MoMo</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createBookingPaymentStatus" class="form-label">
                      Trạng thái thanh toán <span class="text-danger">*</span>
                    </label>
                    <select
                      class="form-select"
                      id="createBookingPaymentStatus"
                      required
                    >
                      <option value="pending">Chờ xử lý</option>
                      <option value="paid">Hoàn thành</option>
                      <option value="failed">Hủy đơn</option>
                    </select>
                  </div>
                </div>
              </div>

              <div class="alert alert-info">
                <i class="fas fa-info-circle me-2"></i>
                <strong>Lưu ý:</strong> Hệ thống sẽ tự động kiểm tra tình trạng
                phòng trống trước khi tạo hóa đơn.
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              <i class="fas fa-times me-2"></i>Hủy
            </button>
            <button
              type="button"
              class="btn btn-success"
              onclick="createBooking()"
            >
              <i class="fas fa-plus me-2"></i>Tạo hóa đơn
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Create Room Modal -->
    <div class="modal fade" id="createRoomModal" tabindex="-1">
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-bed me-2"></i>Thêm phòng mới
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <form id="createRoomForm">
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createRoomHomestay" class="form-label">
                      Homestay <span class="text-danger">*</span>
                    </label>
                    <select
                      class="form-select"
                      id="createRoomHomestay"
                      required
                    >
                      <option value="">-- Chọn homestay --</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="createRoomName" class="form-label">
                      Tên phòng <span class="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      class="form-control"
                      id="createRoomName"
                      required
                      placeholder="Tên loại phòng"
                    />
                  </div>
                </div>
              </div>

              <div class="mb-3">
                <label for="createRoomDescription" class="form-label">
                  Mô tả <span class="text-danger">*</span>
                </label>
                <textarea
                  class="form-control"
                  id="createRoomDescription"
                  rows="3"
                  required
                  placeholder="Mô tả chi tiết về phòng"
                ></textarea>
              </div>

              <div class="row">
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="createRoomBedroom" class="form-label"
                      >Số phòng ngủ</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      id="createRoomBedroom"
                      min="1"
                      value="1"
                    />
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="createRoomToilet" class="form-label"
                      >Số phòng tắm</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      id="createRoomToilet"
                      min="1"
                      value="1"
                    />
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="createRoomPrice" class="form-label">
                      Giá/đêm (VND) <span class="text-danger">*</span>
                    </label>
                    <input
                      type="number"
                      class="form-control"
                      id="createRoomPrice"
                      min="0"
                      required
                      placeholder="500000"
                    />
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="createRoomMinAdults" class="form-label"
                      >Tối thiểu người lớn</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      id="createRoomMinAdults"
                      min="1"
                      value="1"
                    />
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="createRoomMaxAdults" class="form-label"
                      >Tối đa người lớn</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      id="createRoomMaxAdults"
                      min="1"
                      value="2"
                    />
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="createRoomMaxChildren" class="form-label"
                      >Tối đa trẻ em</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      id="createRoomMaxChildren"
                      min="0"
                      value="2"
                    />
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="createRoomMaxGuests" class="form-label"
                      >Tối đa tổng người</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      id="createRoomMaxGuests"
                      min="1"
                      value="4"
                    />
                  </div>
                </div>
              </div>

              <div class="mb-3">
                <label for="createRoomSlug" class="form-label"
                  >Slug (URL thân thiện)</label
                >
                <input
                  type="text"
                  class="form-control"
                  id="createRoomSlug"
                  placeholder="vd: deluxe-room-sea-view"
                />
                <div class="form-text">
                  Để trống để tự động tạo từ tên phòng
                </div>
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Hủy
            </button>
            <button
              type="button"
              class="btn btn-success"
              onclick="createRoom()"
            >
              Tạo phòng
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Manage Room Images Modal -->
    <div class="modal fade" id="manageImagesModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-images me-2"></i>Quản lý ảnh phòng
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <input type="hidden" id="currentRoomId" />

            <!-- Add new image -->
            <div class="border rounded p-3 mb-3">
              <h6>Thêm ảnh mới</h6>
              <div class="row">
                <div class="col-md-8">
                  <input
                    type="url"
                    class="form-control"
                    id="newImageUrl"
                    placeholder="https://example.com/image.jpg"
                  />
                </div>
                <div class="col-md-4">
                  <button class="btn btn-primary" onclick="addRoomImage()">
                    <i class="fas fa-plus"></i> Thêm ảnh
                  </button>
                </div>
              </div>
            </div>

            <!-- Images list -->
            <div id="roomImagesContainer">
              <div class="text-center py-4">
                <i class="fas fa-spinner fa-spin"></i> Đang tải...
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Manage Room Services Modal -->
    <div class="modal fade" id="manageServicesModal" tabindex="-1">
      <div class="modal-dialog modal-lg">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-concierge-bell me-2"></i>Quản lý dịch vụ phòng
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <input type="hidden" id="currentRoomIdServices" />

            <div id="roomServicesContainer">
              <div class="text-center py-4">
                <i class="fas fa-spinner fa-spin"></i> Đang tải...
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Đóng
            </button>
            <button
              type="button"
              class="btn btn-primary"
              onclick="saveRoomServices()"
            >
              Lưu thay đổi
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Booking Modal -->
    <div class="modal fade" id="editBookingModal" tabindex="-1">
      <div class="modal-dialog modal-xl">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">
              <i class="fas fa-edit me-2"></i>Sửa hóa đơn
            </h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <form id="editBookingForm">
              <input type="hidden" id="editBookingId" />

              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="editBookingUser" class="form-label">
                      Người dùng <span class="text-danger">*</span>
                    </label>
                    <select class="form-select" id="editBookingUser" required>
                      <option value="">-- Chọn người dùng --</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="editBookingHomestay" class="form-label">
                      Homestay <span class="text-danger">*</span>
                    </label>
                    <select
                      class="form-select"
                      id="editBookingHomestay"
                      required
                      onchange="loadRoomsForEditHomestay()"
                    >
                      <option value="">-- Chọn homestay --</option>
                    </select>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-12">
                  <div class="mb-3">
                    <label for="editBookingRoom" class="form-label">
                      Loại phòng <span class="text-danger">*</span>
                    </label>
                    <select
                      class="form-select"
                      id="editBookingRoom"
                      required
                      onchange="updateEditRoomInfo()"
                      disabled
                    >
                      <option value="">-- Chọn homestay trước --</option>
                    </select>
                    <div class="form-text" id="editRoomInfoText"></div>
                  </div>
                </div>
              </div>
              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="editBookingName" class="form-label">
                      Tên người đặt <span class="text-danger">*</span>
                    </label>
                    <input
                      type="text"
                      class="form-control"
                      id="editBookingName"
                      required
                    />
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="editBookingDate" class="form-label">
                      Ngày đặt <span class="text-danger">*</span>
                    </label>
                    <input
                      type="date"
                      class="form-control"
                      id="editBookingDate"
                      required
                    />
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="editBookingCheckin" class="form-label">
                      Ngày nhận phòng <span class="text-danger">*</span>
                    </label>
                    <input
                      type="date"
                      class="form-control"
                      id="editBookingCheckin"
                      required
                      onchange="calculateEditTotal()"
                    />
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="editBookingCheckout" class="form-label">
                      Ngày trả phòng <span class="text-danger">*</span>
                    </label>
                    <input
                      type="date"
                      class="form-control"
                      id="editBookingCheckout"
                      required
                      onchange="calculateEditTotal()"
                    />
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="editBookingAdults" class="form-label">
                      Người lớn <span class="text-danger">*</span>
                    </label>
                    <input
                      type="number"
                      class="form-control"
                      id="editBookingAdults"
                      min="1"
                      required
                      onchange="validateEditGuestsAndCalculate()"
                    />
                    <div class="form-text" id="editAdultsLimitText"></div>
                  </div>
                </div>
                <div class="col-md-3">
                  <div class="mb-3">
                    <label for="editBookingChildren" class="form-label"
                      >Trẻ em</label
                    >
                    <input
                      type="number"
                      class="form-control"
                      id="editBookingChildren"
                      min="0"
                      value="0"
                      onchange="validateEditGuestsAndCalculate()"
                    />
                    <div class="form-text" id="editChildrenLimitText"></div>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="editBookingPrice" class="form-label">
                      Tổng tiền <span class="text-danger">*</span>
                    </label>
                    <div class="input-group">
                      <input
                        type="number"
                        class="form-control"
                        id="editBookingPrice"
                        required
                        readonly
                      />
                      <span class="input-group-text">VND</span>
                    </div>
                    <div class="form-text" id="editPriceBreakdown"></div>
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="editBookingEmail" class="form-label"
                      >Email khách</label
                    >
                    <input
                      type="email"
                      class="form-control"
                      id="editBookingEmail"
                    />
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="editBookingPhone" class="form-label"
                      >Số điện thoại</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="editBookingPhone"
                    />
                  </div>
                </div>
                <div class="col-md-4">
                  <div class="mb-3">
                    <label for="editBookingAddress" class="form-label"
                      >Địa chỉ</label
                    >
                    <input
                      type="text"
                      class="form-control"
                      id="editBookingAddress"
                    />
                  </div>
                </div>
              </div>

              <div class="row">
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="editBookingPaymentMethod" class="form-label">
                      Phương thức thanh toán <span class="text-danger">*</span>
                    </label>
                    <select
                      class="form-select"
                      id="editBookingPaymentMethod"
                      required
                    >
                      <option value="cash">Tiền mặt</option>
                      <option value="vnpay">VNPay</option>
                      <option value="momo">MoMo</option>
                    </select>
                  </div>
                </div>
                <div class="col-md-6">
                  <div class="mb-3">
                    <label for="editBookingPaymentStatus" class="form-label">
                      Trạng thái thanh toán <span class="text-danger">*</span>
                    </label>
                    <select
                      class="form-select"
                      id="editBookingPaymentStatus"
                      required
                    >
                      <option value="pending">Chờ thanh toán</option>
                      <option value="paid">Đã thanh toán</option>
                      <option value="failed">Thất bại</option>
                    </select>
                  </div>
                </div>
              </div>

              <div class="alert alert-warning">
                <i class="fas fa-exclamation-triangle me-2"></i>
                <strong>Lưu ý:</strong> Việc sửa hóa đơn có thể ảnh hưởng đến dữ
                liệu thanh toán. Hãy cẩn thận khi thay đổi.
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              <i class="fas fa-times me-2"></i>Hủy
            </button>
            <button
              type="button"
              class="btn btn-primary"
              onclick="updateBooking()"
            >
              <i class="fas fa-save me-2"></i>Cập nhật
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Add Service Modal -->
    <div class="modal fade" id="addServiceModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Thêm dịch vụ mới</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <form id="addServiceForm">
              <div class="mb-3">
                <label for="serviceName" class="form-label">Tên dịch vụ</label>
                <input
                  type="text"
                  class="form-control"
                  id="serviceName"
                  required
                />
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Hủy
            </button>
            <button
              type="button"
              class="btn btn-primary"
              onclick="addService()"
            >
              Thêm
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Edit Service Modal -->
    <div class="modal fade" id="editServiceModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Sửa dịch vụ</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
            ></button>
          </div>
          <div class="modal-body">
            <form id="editServiceForm">
              <input type="hidden" id="editServiceId" />
              <div class="mb-3">
                <label for="editServiceName" class="form-label"
                  >Tên dịch vụ</label
                >
                <input
                  type="text"
                  class="form-control"
                  id="editServiceName"
                  required
                />
              </div>
            </form>
          </div>
          <div class="modal-footer">
            <button
              type="button"
              class="btn btn-secondary"
              data-bs-dismiss="modal"
            >
              Hủy
            </button>
            <button
              type="button"
              class="btn btn-primary"
              onclick="updateService()"
            >
              Cập nhật
            </button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script>
      // Menu navigation
      document.addEventListener("DOMContentLoaded", function () {
        const menuLinks = document.querySelectorAll(".menu-link");
        const contentSections = document.querySelectorAll(".content-section");
        // Event listeners cho ngày check-in/check-out
        document.addEventListener("change", function (e) {
          if (
            e.target.id === "createBookingCheckin" ||
            e.target.id === "createBookingCheckout"
          ) {
            validateGuestsAndCalculate();
          }
        });
        menuLinks.forEach((link) => {
          link.addEventListener("click", function (e) {
            const href = this.getAttribute("href");

            //Cho phép logout và về trang chủ hoạt động bình thường
            if (href === "/logout" || href === "/") {
              return;
            }

            e.preventDefault();

            const targetSection = this.getAttribute("data-section");

            if (targetSection) {
              // Remove active class from all menu links
              menuLinks.forEach((ml) => ml.classList.remove("active"));

              // Add active class to clicked link
              this.classList.add("active");

              // Hide all content sections
              contentSections.forEach((section) =>
                section.classList.remove("active")
              );

              // Show target section
              const targetElement = document.getElementById(targetSection);
              if (targetElement) {
                targetElement.classList.add("active");

                // Load data for the section
                loadSectionData(targetSection);
              }
            }
          });
        });

        // Sidebar toggle
        const sidebarToggle = document.getElementById("sidebarToggle");
        const sidebar = document.querySelector(".sidebar");
        const mainContent = document.querySelector(".main-content");
        const sidebarOverlay = document.getElementById("sidebarOverlay");

        if (sidebarToggle) {
          sidebarToggle.addEventListener("click", function () {
            const isOpen = sidebar.classList.contains("show");

            if (isOpen) {
              closeSidebar();
            } else {
              openSidebar();
            }
          });
        }

        function openSidebar() {
          sidebar.classList.add("show");
          mainContent.classList.add("sidebar-open");
          if (window.innerWidth <= 768) {
            sidebarOverlay.classList.add("show");
          }
        }

        function closeSidebar() {
          sidebar.classList.remove("show");
          mainContent.classList.remove("sidebar-open");
          sidebarOverlay.classList.remove("show");
        }

        // Đóng sidebar khi click overlay
        sidebarOverlay.addEventListener("click", closeSidebar);

        // Đóng sidebar khi click bên ngoài (mobile)
        document.addEventListener("click", function (e) {
          if (window.innerWidth <= 768) {
            if (
              !sidebar.contains(e.target) &&
              !sidebarToggle.contains(e.target)
            ) {
              closeSidebar();
            }
          }
        });

        // Xử lý resize window
        window.addEventListener("resize", function () {
          if (window.innerWidth > 768) {
            sidebarOverlay.classList.remove("show");
          }
        });

        // Load initial data for dashboard
        loadSectionData("dashboard");
      });

      // Load data for different sections
      function loadSectionData(section) {
        switch (section) {
          case "users":
            refreshUsers();
            break;
          case "homestays":
            refreshHomestays();
            break;
          case "rooms":
            refreshRooms();
            break;
          case "bookings":
            refreshBookings();
            break;
          case "reviews":
            refreshReviews();
            break;
          case "services":
            refreshServices();
            break;
        }
      }

      // API calls
      async function apiCall(url, options = {}) {
        const merged = {
          credentials: "same-origin", // để gửi cookie phiên đăng nhập
          headers: {
            // gộp headers mặc định & tuỳ chọn
            "Content-Type": "application/json",
            ...(options.headers || {}),
          },
          ...options,
        };

        const res = await fetch(url, merged);

        // Trả lại JSON hoặc quăng lỗi chi tiết
        const data = await res.json().catch(() => ({}));
        if (!res.ok) {
          throw new Error(data.message || `HTTP ${res.status}`);
        }
        return data;
      }

      // Users functions
      async function refreshUsers(page = 1) {
        const content = document.getElementById("users-content");
        content.innerHTML =
          '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Đang tải...</div>';

        try {
          const data = await apiCall(`/admin/users?page=${page}`);
          renderUsersTable(data);
        } catch (error) {
          content.innerHTML =
            '<div class="alert alert-danger">Lỗi tải dữ liệu người dùng</div>';
        }
      }

      function renderBookingsTable(data) {
        const content = document.getElementById("bookings-content");
        let html = `
    <div class="table-responsive">
      <table class="table">
        <thead>
          <tr>
            <th>STT</th>
            <th>ID</th>
            <th>Khách hàng</th>
            <th>Phòng</th>
            <th>Ngày đặt</th>
            <th>Tổng tiền</th>
            <th>Phương thức</th>
            <th>Trạng thái</th>
            <th>Hành động</th>
          </tr>
        </thead>
        <tbody>
  `;

        if (data.bookings && data.bookings.length > 0) {
          data.bookings.forEach((booking, index) => {
            let statusBadge = "";
            switch (booking.payment_status) {
              case "paid":
                statusBadge =
                  '<span class="badge bg-success">Hoàn thành</span>';
                break;
              case "pending":
                statusBadge = '<span class="badge bg-warning">Chờ xử lý</span>';
                break;
              case "failed":
                statusBadge = '<span class="badge bg-danger">Đã hủy</span>';
                break;
              default:
                statusBadge = `<span class="badge bg-light">${booking.payment_status}</span>`;
            }

            // ✅ THÊM logic hiển thị phương thức thanh toán
            let paymentMethodBadge = "";
            switch (booking.payment_method) {
              case "vnpay":
                paymentMethodBadge = '<span class="badge bg-info">VNPay</span>';
                break;
              case "momo":
                paymentMethodBadge =
                  '<span class="badge bg-primary">MoMo</span>';
                break;
              case "cash":
                paymentMethodBadge =
                  '<span class="badge bg-secondary">Tiền mặt</span>';
                break;
              default:
                paymentMethodBadge = `<span class="badge bg-light">${
                  booking.payment_method || "N/A"
                }</span>`;
            }

            html += `
        <tr>
          <td>${index + 1}</td>
          <td>${booking.booking_id}</td>
          <td>${booking.User ? booking.User.name : booking.name}</td>
          <td>${booking.RoomType ? booking.RoomType.type_name : "N/A"}</td>
          <td>${new Date(booking.booking_date).toLocaleDateString("vi-VN")}</td>
          <td>${new Intl.NumberFormat("vi-VN").format(
            booking.total_price
          )} VND</td>
          <td>${paymentMethodBadge}</td>
          <td>${statusBadge}</td>
          <td>
            <button class="btn-action btn-view" onclick="viewBooking(${
              booking.booking_id
            })">Xem</button>
            <button class="btn-action btn-edit" onclick="editBooking(${
              booking.booking_id
            })">Sửa</button>
            <select class="form-select form-select-sm d-inline-block w-auto" onchange="updateBookingStatus(${
              booking.booking_id
            }, this.value)">
              <option value="">Chọn</option>
              <option value="pending" ${
                booking.payment_status === "pending" ? "selected" : ""
              }>Chờ xử lý</option>
              <option value="paid" ${
                booking.payment_status === "paid" ? "selected" : ""
              }>Hoàn thành</option>
              <option value="failed" ${
                booking.payment_status === "failed" ? "selected" : ""
              }>Từ chối</option>
            </select>
          </td>
        </tr>
      `;
          });
        } else {
          html +=
            '<tr><td colspan="9" class="text-center">Không có dữ liệu</td></tr>'; // ✅ SỬA colspan từ 8 thành 9
        }

        html += "</tbody></table></div>";

        if (data.pagination && data.pagination.totalPages > 1) {
          html += renderPagination(data.pagination, "refreshBookings");
        }

        content.innerHTML = html;
      }
      function renderUsersTable(data) {
        const content = document.getElementById("users-content");
        let html = `
    <div class="table-responsive">
      <table class="table">
        <thead>
          <tr>
            <th>STT</th>
            <th>ID</th>
            <th>Họ tên</th>
            <th>Email</th>
            <th>Vai trò</th>
            <th>Điện thoại</th>
            <th>Ngày tạo</th>
            <th>Hành động</th>
          </tr>
        </thead>
        <tbody>
  `;
        if (data.users && data.users.length) {
          data.users.forEach((u, idx) => {
            // Nếu là admin thì không cho thao tác
            const isAdmin = u.role === "admin";
            html += `
        <tr>
          <td>${idx + 1}</td>
          <td>${u.user_id}</td>
          <td>${u.name}</td>
          <td>${u.email}</td>
          <td>${
            isAdmin
              ? `<span class="badge bg-danger">Admin</span>`
              : `<span class="badge bg-primary">User</span>`
          }
          </td>
          <td>${u.phone || ""}</td>
          <td>${new Date(u.created_at).toLocaleDateString("vi-VN")}</td>
          <td>
      `;
            if (isAdmin) {
              html += `<span class="text-muted">Không thể thao tác</span>`;
            } else {
              html += `
          <button class="btn-action btn-view" onclick="viewUser(${u.user_id})">Xem</button>
          <button class="btn-action btn-edit" onclick="editUser(${u.user_id})">Sửa</button>
          <button class="btn-action btn-delete" onclick="deleteUser(${u.user_id})">Xóa</button>
        `;
            }
            html += `</td></tr>`;
          });
        } else {
          html += `<tr><td colspan="8" class="text-center">Không có dữ liệu</td></tr>`;
        }
        html += `</tbody></table></div>`;

        // Pagination (nếu có)
        if (data.pagination && data.pagination.totalPages > 1) {
          html += renderPagination(data.pagination, "refreshUsers");
        }

        content.innerHTML = html;
      }

      async function viewUser(id) {
        try {
          const res = await apiCall(`/admin/users/${id}`);
          if (!res.success || !res.user) {
            return Swal.fire({
              icon: "error",
              title: "Lỗi",
              text: res.message || "Không tìm thấy người dùng!",
            });
          }

          const user = res.user;
          const bookingCount = res.bookingCount || 0;

          // Format thông tin user (ẩn trường null)
          const info = `
      <strong>ID:</strong> ${user.user_id}<br>
      ${user.name ? `<strong>Họ tên:</strong> ${user.name}<br>` : ""}
      ${user.email ? `<strong>Email:</strong> ${user.email}<br>` : ""}
      ${user.phone ? `<strong>Điện thoại:</strong> ${user.phone}<br>` : ""}
      ${
        user.dob
          ? `<strong>Ngày sinh:</strong> ${new Date(
              user.dob
            ).toLocaleDateString("vi-VN")}<br>`
          : ""
      }
      ${
        user.gender
          ? `<strong>Giới tính:</strong> ${
              user.gender === "male" ? "Nam" : "Nữ"
            }<br>`
          : ""
      }
      <strong>Vai trò:</strong> ${
        user.role === "admin" ? "Quản trị viên" : "Người dùng"
      }<br>
      <strong>Số hóa đơn hiện tại:</strong> ${bookingCount}
    `;

          Swal.fire({
            title: "Thông tin tài khoản",
            html: info,
            icon: "info",
            confirmButtonText: "Đóng",
          });
        } catch (error) {
          console.error("❌ Lỗi khi xem thông tin:", error);
          Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể lấy thông tin người dùng!",
          });
        }
      }

      async function editUser(id) {
        try {
          const res = await apiCall(`/admin/users/${id}`);
          if (!res.success || !res.user) {
            return Swal.fire({
              icon: "error",
              title: "Lỗi",
              text: res.message || "Không tìm thấy người dùng!",
            });
          }

          const user = res.user;
          const bookingCount = res.bookingCount || 0;
          const paidBookings = res.paidBookings || 0;

          const { value: formValues } = await Swal.fire({
            title: "Chỉnh sửa thông tin người dùng",
            html:
              `<p><strong>Hóa đơn đã thanh toán:</strong> ${paidBookings} / ${bookingCount}</p>` +
              `<input id="swal-name" class="swal2-input" placeholder="Tên" value="${
                user.name || ""
              }">` +
              `<input id="swal-email" class="swal2-input" placeholder="Email" value="${
                user.email || ""
              }">` +
              `<input id="swal-phone" class="swal2-input" placeholder="Số điện thoại" value="${
                user.phone || ""
              }">` +
              `<input id="swal-dob" class="swal2-input" type="date" value="${
                user.dob ? user.dob.split("T")[0] : ""
              }">` +
              `<select id="swal-gender" class="swal2-input">
          <option value="">-- Giới tính --</option>
          <option value="male" ${
            user.gender === "male" ? "selected" : ""
          }>Nam</option>
          <option value="female" ${
            user.gender === "female" ? "selected" : ""
          }>Nữ</option>
        </select>` +
              `<input id="swal-new-password" type="password" class="swal2-input" placeholder="Mật khẩu mới (nếu muốn đổi)">`,
            focusConfirm: false,
            showCancelButton: true,
            confirmButtonText: "Lưu thay đổi",
            cancelButtonText: "Hủy",
            preConfirm: () => {
              return {
                name: document.getElementById("swal-name").value.trim(),
                email: document.getElementById("swal-email").value.trim(),
                phone: document.getElementById("swal-phone").value.trim(),
                dob: document.getElementById("swal-dob").value || null,
                gender: document.getElementById("swal-gender").value || null,
                newPassword:
                  document.getElementById("swal-new-password").value || null,
              };
            },
          });

          if (!formValues) return;

          const updateRes = await apiCall(`/admin/users/${id}`, {
            method: "PUT",
            body: JSON.stringify(formValues),
          });

          if (updateRes.success) {
            await Swal.fire({
              icon: "success",
              title: "Cập nhật thành công",
              text:
                updateRes.message || "Thông tin người dùng đã được cập nhật!",
            });
            refreshUsers();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: updateRes.message || "Không thể cập nhật.",
            });
          }
        } catch (error) {
          console.error("❌ Edit user error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      async function deleteUser(userId) {
        const result = await Swal.fire({
          title: "Bạn có chắc chắn?",
          text: "Bạn muốn xóa người dùng này?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#d33",
          cancelButtonColor: "#6c757d",
          confirmButtonText: "Có, xóa ngay!",
          cancelButtonText: "Không",
        });

        if (!result.isConfirmed) return;

        try {
          const res = await apiCall(`/admin/users/${userId}`, {
            method: "DELETE",
          });
          if (res.success) {
            await Swal.fire({
              icon: "success",
              title: "Đã xóa!",
              text: res.message || "Người dùng đã được xóa thành công!",
              confirmButtonColor: "#3085d6",
            });
            refreshUsers();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Không thể xóa",
              text: res.message || "Có lỗi xảy ra khi xóa người dùng!",
              confirmButtonColor: "#d33",
            });
          }
        } catch (error) {
          console.error("❌ Delete user error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ hoặc lỗi không xác định!",
            confirmButtonColor: "#d33",
          });
        }
      }

      // Homestays functions
      async function refreshHomestays(page = 1) {
        const content = document.getElementById("homestays-content");
        content.innerHTML =
          '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Đang tải...</div>';

        try {
          const data = await apiCall(`/admin/homestays?page=${page}`);
          renderHomestaysTable(data);
        } catch (error) {
          content.innerHTML =
            '<div class="alert alert-danger">Lỗi tải dữ liệu homestay</div>';
        }
      }

      function renderHomestaysTable(data) {
        const content = document.getElementById("homestays-content");
        let html = `
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>STT</th>
                <th>ID</th>
                <th>Tên</th>
                <th>Địa chỉ</th>
                <th>Số phòng</th>
                <th>Ngày tạo</th>
                <th>Hành động</th>
              </tr>
            </thead>
            <tbody>
      `;

        if (data.homestays && data.homestays.length > 0) {
          data.homestays.forEach((homestay, index) => {
            html += `
            <tr>
              <td>${index + 1}</td>
              <td>${homestay.homestay_id}</td>
              <td>${homestay.name}</td>
              <td>${homestay.address}</td>
              <td>${homestay.RoomTypes ? homestay.RoomTypes.length : 0}</td>
              <td>${new Date(homestay.created_at).toLocaleDateString(
                "vi-VN"
              )}</td>
              <td>
                  <button class="btn-action btn-view" onclick="viewHomestay(${
                    homestay.homestay_id
                  })">Xem</button>
                  <button class="btn-action btn-edit" onclick="editHomestay(${
                    homestay.homestay_id
                  })">Sửa</button>
                  <button class="btn-action btn-delete" onclick="deleteHomestay(${
                    homestay.homestay_id
                  })">Xóa</button>
              </td>
            </tr>
          `;
          });
        } else {
          html +=
            '<tr><td colspan="6" class="text-center">Không có dữ liệu</td></tr>';
        }

        html += "</tbody></table></div>";

        if (data.pagination && data.pagination.totalPages > 1) {
          html += renderPagination(data.pagination, "refreshHomestays");
        }

        content.innerHTML = html;
      }

      // Rooms functions
      async function refreshRooms(page = 1) {
        const content = document.getElementById("rooms-content");
        content.innerHTML =
          '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Đang tải...</div>';

        try {
          const data = await apiCall(`/admin/rooms?page=${page}`);
          renderRoomsTable(data);
        } catch (error) {
          content.innerHTML =
            '<div class="alert alert-danger">Lỗi tải dữ liệu phòng</div>';
        }
      }

      function renderRoomsTable(data) {
        const content = document.getElementById("rooms-content");
        let html = `
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>STT</th>
                <th>ID</th>
                <th>Tên phòng</th>
                <th>Homestay</th>
                <th>Giá/đêm</th>
                <th>Sức chứa</th>
                <th>Hành động</th>
              </tr>
            </thead>
            <tbody>
      `;

        if (data.rooms && data.rooms.length > 0) {
          data.rooms.forEach((room, index) => {
            html += `
            <tr>
              <td>${index + 1}</td>
              <td>${room.room_type_id}</td>
              <td>${room.type_name}</td>
              <td>${room.Homestay ? room.Homestay.name : "N/A"}</td>
              <td>${new Intl.NumberFormat("vi-VN").format(
                room.price_per_night
              )} VND</td>
              <td>${room.max_guests} người</td>
              <td>
              <td>
                  <button class="btn-action btn-view" onclick="viewRoom(${
                    room.room_type_id
                  })">Xem</button>
                  <button class="btn-action btn-edit" onclick="editRoom(${
                    room.room_type_id
                  })">Sửa</button>
                  <button class="btn-action" style="background: #17a2b8; color: white;" onclick="manageRoomImages(${
                    room.room_type_id
                  })">Ảnh</button>
                  <button class="btn-action" style="background: #6f42c1; color: white;" onclick="manageRoomServices(${
                    room.room_type_id
                  })">Dịch vụ</button>
                  <button class="btn-action btn-delete" onclick="deleteRoom(${
                    room.room_type_id
                  })">Xóa</button>
              </td>
            </tr>
          `;
          });
        } else {
          html +=
            '<tr><td colspan="6" class="text-center">Không có dữ liệu</td></tr>';
        }

        html += "</tbody></table></div>";

        if (data.pagination && data.pagination.totalPages > 1) {
          html += renderPagination(data.pagination, "refreshRooms");
        }

        content.innerHTML = html;
      }

      // Bookings functions
      async function refreshBookings(page = 1) {
        const content = document.getElementById("bookings-content");
        const status =
          document.getElementById("bookingStatusFilter")?.value || "all";
        content.innerHTML =
          '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Đang tải...</div>';

        try {
          const data = await apiCall(
            `/admin/bookings?page=${page}&status=${status}`
          );
          renderBookingsTable(data);
        } catch (error) {
          content.innerHTML =
            '<div class="alert alert-danger">Lỗi tải dữ liệu hóa đơn</div>';
        }
      }

      // SỬA function renderBookingsTable - thêm nút Sửa
      function renderBookingsTable(data) {
        const content = document.getElementById("bookings-content");
        let html = `
    <div class="table-responsive">
      <table class="table">
        <thead>
          <tr>
            <th>STT</th>
            <th>ID</th>
            <th>Khách hàng</th>
            <th>Phòng</th>
            <th>Ngày đặt</th>
            <th>Tổng tiền</th>
            <th>Phương thức</th>
            <th>Trạng thái</th>
            <th>Hành động</th>
          </tr>
        </thead>
        <tbody>
  `;

        if (data.bookings && data.bookings.length > 0) {
          data.bookings.forEach((booking, index) => {
            let statusBadge = "";
            switch (booking.payment_status) {
              case "paid":
                statusBadge =
                  '<span class="badge bg-success">Hoàn thành</span>';
                break;
              case "pending":
                statusBadge = '<span class="badge bg-warning">Chờ xử lý</span>';
                break;
              case "failed":
                statusBadge = '<span class="badge bg-danger">Đã hủy</span>';
                break;
              default:
                statusBadge = `<span class="badge bg-light">${booking.payment_status}</span>`;
            }

            // ✅ THÊM logic hiển thị phương thức thanh toán
            let paymentMethodBadge = "";
            switch (booking.payment_method) {
              case "vnpay":
                paymentMethodBadge = '<span class="badge bg-info">VNPay</span>';
                break;
              case "momo":
                paymentMethodBadge =
                  '<span class="badge bg-primary">MoMo</span>';
                break;
              case "cash":
                paymentMethodBadge =
                  '<span class="badge bg-secondary">Tiền mặt</span>';
                break;
              default:
                paymentMethodBadge = `<span class="badge bg-light">${
                  booking.payment_method || "N/A"
                }</span>`;
            }

            html += `
        <tr>
          <td>${index + 1}</td>
          <td>${booking.booking_id}</td>
          <td>${booking.User ? booking.User.name : booking.name}</td>
          <td>${booking.RoomType ? booking.RoomType.type_name : "N/A"}</td>
          <td>${new Date(booking.booking_date).toLocaleDateString("vi-VN")}</td>
          <td>${new Intl.NumberFormat("vi-VN").format(
            booking.total_price
          )} VND</td>
          <td>${paymentMethodBadge}</td>
          <td>${statusBadge}</td>
          <td>
            <button class="btn-action btn-view" onclick="viewBooking(${
              booking.booking_id
            })">Xem</button>
            <button class="btn-action btn-edit" onclick="editBooking(${
              booking.booking_id
            })">Sửa</button>
            <select class="form-select form-select-sm d-inline-block w-auto" onchange="updateBookingStatus(${
              booking.booking_id
            }, this.value)">
              <option value="">Chọn</option>
              <option value="pending" ${
                booking.payment_status === "pending" ? "selected" : ""
              }>Chờ xử lý</option>
              <option value="paid" ${
                booking.payment_status === "paid" ? "selected" : ""
              }>Hoàn thành</option>
              <option value="failed" ${
                booking.payment_status === "failed" ? "selected" : ""
              }>Từ chối</option>
            </select>
          </td>
        </tr>
      `;
          });
        } else {
          html +=
            '<tr><td colspan="9" class="text-center">Không có dữ liệu</td></tr>'; // ✅ SỬA colspan từ 8 thành 9
        }

        html += "</tbody></table></div>";

        if (data.pagination && data.pagination.totalPages > 1) {
          html += renderPagination(data.pagination, "refreshBookings");
        }

        content.innerHTML = html;
      }

      async function updateBookingStatus(bookingId, status) {
        if (!status) return;

        try {
          const res = await apiCall(`/admin/bookings/${bookingId}/status`, {
            method: "PUT",
            body: JSON.stringify({ status }),
          });

          if (res.success) {
            Toastify({
              text: "✅ Cập nhật trạng thái thành công!",
              duration: 3000,
              gravity: "top",
              position: "right",
              backgroundColor: "#28a745",
            }).showToast();

            refreshBookings();
          } else {
            Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: res.message || "Không thể cập nhật trạng thái!",
            });
          }
        } catch (error) {
          console.error("❌ Cập nhật thất bại:", error);
          Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      // Reviews functions
      async function refreshReviews(page = 1) {
        const content = document.getElementById("reviews-content");
        content.innerHTML =
          '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Đang tải...</div>';

        try {
          const data = await apiCall(`/admin/reviews?page=${page}`);
          renderReviewsTable(data);
        } catch (error) {
          content.innerHTML =
            '<div class="alert alert-danger">Lỗi tải dữ liệu đánh giá</div>';
        }
      }

      function renderReviewsTable(data) {
        const content = document.getElementById("reviews-content");
        let html = `
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>STT</th>
                <th>ID</th>
                <th>Khách hàng</th>
                <th>Phòng</th>
                <th>Đánh giá</th>
                <th>Bình luận</th>
                <th>Ngày tạo</th>
                <th>Hành động</th>
              </tr>
            </thead>
            <tbody>
      `;

        if (data.reviews && data.reviews.length > 0) {
          data.reviews.forEach((review, index) => {
            const stars =
              "★".repeat(review.rating) + "☆".repeat(5 - review.rating);

            html += `
            <tr>
              <td>${index + 1}</td>
              <td>${review.review_id}</td>
              <td>${review.User ? review.User.name : "Ẩn danh"}</td>
              <td>${review.RoomType ? review.RoomType.type_name : "N/A"}</td>
              <td><span class="text-warning">${stars}</span></td>
              <td>${
                review.comment
                  ? review.comment.substring(0, 50) + "..."
                  : "Không có"
              }</td>
              <td>${new Date(review.created_at).toLocaleDateString(
                "vi-VN"
              )}</td>
              <td>
                <button class="btn-action btn-view" onclick="viewReview(${
                  review.review_id
                })">Xem</button>
                <button class="btn-action btn-delete" onclick="deleteReview(${
                  review.review_id
                })">Xóa</button>
              </td>
            </tr>
          `;
          });
        } else {
          html +=
            '<tr><td colspan="8" class="text-center">Không có dữ liệu</td></tr>';
        }

        html += "</tbody></table></div>";

        if (data.pagination && data.pagination.totalPages > 1) {
          html += renderPagination(data.pagination, "refreshReviews");
        }

        content.innerHTML = html;
      }

      async function deleteReview(reviewId) {
        if (!confirm("Bạn có chắc chắn muốn xóa đánh giá này?")) return;

        try {
          await apiCall(`/admin/reviews/${reviewId}`, { method: "DELETE" });
          alert("Xóa đánh giá thành công");
          refreshReviews();
        } catch (error) {
          alert("Lỗi xóa đánh giá");
        }
      }

      // Services functions
      async function refreshServices() {
        const content = document.getElementById("services-content");
        content.innerHTML =
          '<div class="loading"><i class="fas fa-spinner fa-spin"></i> Đang tải...</div>';

        try {
          const data = await apiCall("/admin/services");
          renderServicesTable(data);
        } catch (error) {
          content.innerHTML =
            '<div class="alert alert-danger">Lỗi tải dữ liệu dịch vụ</div>';
        }
      }

      function renderServicesTable(data) {
        const content = document.getElementById("services-content");
        let html = `
        <div class="table-responsive">
          <table class="table">
            <thead>
              <tr>
                <th>STT</th>
                <th>ID</th>
                <th>Tên dịch vụ</th>
                <th>Hành động</th>
              </tr>
            </thead>
            <tbody>
      `;

        if (data.services && data.services.length > 0) {
          data.services.forEach((service, index) => {
            html += `
            <tr>
              <td>${index + 1}</td>
              <td>${service.service_id}</td>
              <td>${service.service_name}</td>
              <td>
                <button class="btn-action btn-edit" onclick="showEditServiceModal(${
                  service.service_id
                }, '${service.service_name}')">Sửa</button>
                <button class="btn-action btn-delete" onclick="deleteService(${
                  service.service_id
                })">Xóa</button>
              </td>
            </tr>
          `;
          });
        } else {
          html +=
            '<tr><td colspan="3" class="text-center">Không có dữ liệu</td></tr>';
        }

        html += "</tbody></table></div>";
        content.innerHTML = html;
      }

      function showAddServiceModal() {
        document.getElementById("serviceName").value = "";
        new bootstrap.Modal(document.getElementById("addServiceModal")).show();
      }

      function showEditServiceModal(serviceId, serviceName) {
        document.getElementById("editServiceId").value = serviceId;
        document.getElementById("editServiceName").value = serviceName;
        new bootstrap.Modal(document.getElementById("editServiceModal")).show();
      }

      async function addService() {
        const serviceName = document.getElementById("serviceName").value;

        if (!serviceName.trim()) {
          alert("Vui lòng nhập tên dịch vụ");
          return;
        }

        try {
          await apiCall("/admin/services", {
            method: "POST",
            body: JSON.stringify({ service_name: serviceName }),
          });
          alert("Thêm dịch vụ thành công");
          bootstrap.Modal.getInstance(
            document.getElementById("addServiceModal")
          ).hide();
          refreshServices();
        } catch (error) {
          alert("Lỗi thêm dịch vụ");
        }
      }

      async function updateService() {
        const serviceId = document.getElementById("editServiceId").value;
        const serviceName = document.getElementById("editServiceName").value;

        if (!serviceName.trim()) {
          alert("Vui lòng nhập tên dịch vụ");
          return;
        }

        try {
          await apiCall(`/admin/services/${serviceId}`, {
            method: "PUT",
            body: JSON.stringify({ service_name: serviceName }),
          });
          alert("Cập nhật dịch vụ thành công");
          bootstrap.Modal.getInstance(
            document.getElementById("editServiceModal")
          ).hide();
          refreshServices();
        } catch (error) {
          alert("Lỗi cập nhật dịch vụ");
        }
      }

      async function deleteService(serviceId) {
        if (!confirm("Bạn có chắc chắn muốn xóa dịch vụ này?")) return;

        try {
          await apiCall(`/admin/services/${serviceId}`, { method: "DELETE" });
          alert("Xóa dịch vụ thành công");
          refreshServices();
        } catch (error) {
          alert("Lỗi xóa dịch vụ");
        }
      }

      // Utility functions
      function renderPagination(pagination, functionName) {
        let html =
          '<nav aria-label="Page navigation"><ul class="pagination justify-content-center">';

        // Previous button
        if (pagination.currentPage > 1) {
          html += `<li class="page-item">
          <a class="page-link" href="#" onclick="${functionName}(${
            pagination.currentPage - 1
          })">Trước</a>
        </li>`;
        }

        // Page numbers
        const startPage = Math.max(1, pagination.currentPage - 2);
        const endPage = Math.min(
          pagination.totalPages,
          pagination.currentPage + 2
        );

        for (let i = startPage; i <= endPage; i++) {
          html += `<li class="page-item ${
            i === pagination.currentPage ? "active" : ""
          }">
          <a class="page-link" href="#" onclick="${functionName}(${i})">${i}</a>
        </li>`;
        }

        // Next button
        if (pagination.currentPage < pagination.totalPages) {
          html += `<li class="page-item">
          <a class="page-link" href="#" onclick="${functionName}(${
            pagination.currentPage + 1
          })">Sau</a>
        </li>`;
        }

        html += "</ul></nav>";
        return html;
      }

      // Placeholder functions for view/edit actions
      async function viewHomestay(id) {
        try {
          const res = await apiCall(`/admin/homestays/${id}`);
          if (!res.success || !res.homestay) {
            return Swal.fire({
              icon: "error",
              title: "Lỗi",
              text: res.message || "Không tìm thấy homestay!",
            });
          }

          const homestay = res.homestay;
          const roomCount = res.roomCount || 0;
          const totalBookings = res.totalBookings || 0;

          const info = `
      <strong>ID:</strong> ${homestay.homestay_id}<br>
      <strong>Tên:</strong> ${homestay.name}<br>
      <strong>Mô tả:</strong> ${homestay.description}<br>
      <strong>Địa chỉ:</strong> ${homestay.address}<br>
      <strong>Số phòng:</strong> ${roomCount} phòng<br>
      <strong>Tổng lượt đặt:</strong> ${totalBookings} lần<br>
      <strong>Ngày tạo:</strong> ${new Date(
        homestay.created_at
      ).toLocaleDateString("vi-VN")}
    `;

          Swal.fire({
            title: "Thông tin Homestay",
            html: info,
            icon: "info",
            confirmButtonText: "Đóng",
            width: "600px",
          });
        } catch (error) {
          console.error("❌ Lỗi khi xem homestay:", error);
          Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể lấy thông tin homestay!",
          });
        }
      }

      async function editHomestay(id) {
        try {
          const res = await apiCall(`/admin/homestays/${id}`);
          if (!res.success || !res.homestay) {
            return Swal.fire({
              icon: "error",
              title: "Lỗi",
              text: res.message || "Không tìm thấy homestay!",
            });
          }

          const homestay = res.homestay;

          const { value: formValues } = await Swal.fire({
            title: "Chỉnh sửa thông tin Homestay",
            html: `
        <div class="text-start">
          <div class="mb-3">
            <label class="form-label"><strong>Tên Homestay:</strong></label>
            <input id="swal-name" class="form-control" value="${
              homestay.name || ""
            }" placeholder="Tên homestay">
          </div>
          <div class="mb-3">
            <label class="form-label"><strong>Mô tả:</strong></label>
            <textarea id="swal-description" class="form-control" rows="3" placeholder="Mô tả homestay">${
              homestay.description || ""
            }</textarea>
          </div>
          <div class="mb-3">
            <label class="form-label"><strong>Địa chỉ:</strong></label>
            <input id="swal-address" class="form-control" value="${
              homestay.address || ""
            }" placeholder="Địa chỉ">
          </div>
          <div class="mb-3">
            <label class="form-label"><strong>URL ảnh đại diện:</strong></label>
            <input id="swal-thumbnail" class="form-control" value="${
              homestay.thumbnail_url || ""
            }" placeholder="https://example.com/image.jpg">
          </div>
        </div>
      `,
            focusConfirm: false,
            showCancelButton: true,
            confirmButtonText: "Lưu thay đổi",
            cancelButtonText: "Hủy",
            width: "600px",
            preConfirm: () => {
              const name = document.getElementById("swal-name").value.trim();
              const description = document
                .getElementById("swal-description")
                .value.trim();
              const address = document
                .getElementById("swal-address")
                .value.trim();
              const thumbnail_url = document
                .getElementById("swal-thumbnail")
                .value.trim();

              if (!name || !address) {
                Swal.showValidationMessage(
                  "Tên và địa chỉ không được để trống"
                );
                return false;
              }

              return { name, description, address, thumbnail_url };
            },
          });

          if (!formValues) return;

          const updateRes = await apiCall(`/admin/homestays/${id}`, {
            method: "PUT",
            body: JSON.stringify(formValues),
          });

          if (updateRes.success) {
            await Swal.fire({
              icon: "success",
              title: "Cập nhật thành công",
              text: updateRes.message || "Thông tin homestay đã được cập nhật!",
            });
            refreshHomestays();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: updateRes.message || "Không thể cập nhật homestay.",
            });
          }
        } catch (error) {
          console.error("❌ Edit homestay error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      // ===== ROOM TYPES FUNCTIONS =====
      async function viewRoom(id) {
        try {
          const res = await apiCall(`/admin/rooms/${id}`);
          if (!res.success || !res.room) {
            return Swal.fire({
              icon: "error",
              title: "Lỗi",
              text: res.message || "Không tìm thấy phòng!",
            });
          }

          const room = res.room;
          const bookingCount = res.bookingCount || 0;
          const averageRating = res.averageRating || 0;

          // Format services
          const services =
            room.Services && room.Services.length > 0
              ? room.Services.map((s) => s.service_name).join(", ")
              : "Không có dịch vụ";

          const info = `
      <strong>ID:</strong> ${room.room_type_id}<br>
      <strong>Tên phòng:</strong> ${room.type_name}<br>
      <strong>Homestay:</strong> ${
        room.Homestay ? room.Homestay.name : "N/A"
      }<br>
      <strong>Mô tả:</strong> ${room.description}<br>
      <strong>Số phòng ngủ:</strong> ${room.bedroom_count}<br>
      <strong>Số phòng tắm:</strong> ${room.toilet_count}<br>
      <strong>Sức chứa:</strong> ${room.max_guests} người (${
            room.max_adults
          } người lớn, ${room.max_children} trẻ em)<br>
      <strong>Giá/đêm:</strong> ${new Intl.NumberFormat("vi-VN").format(
        room.price_per_night
      )} VND<br>
      <strong>Dịch vụ:</strong> ${services}<br>
      <strong>Lượt đặt:</strong> ${bookingCount} lần<br>
      <strong>Đánh giá TB:</strong> ${
        averageRating > 0 ? averageRating.toFixed(1) + "/5" : "Chưa có"
      }<br>
      <strong>Ngày tạo:</strong> ${new Date(room.created_at).toLocaleDateString(
        "vi-VN"
      )}
    `;

          Swal.fire({
            title: "Thông tin phòng",
            html: info,
            icon: "info",
            confirmButtonText: "Đóng",
            width: "700px",
          });
        } catch (error) {
          console.error("❌ Lỗi khi xem phòng:", error);
          Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể lấy thông tin phòng!",
          });
        }
      }

      async function editRoom(id) {
        try {
          const res = await apiCall(`/admin/rooms/${id}`);
          if (!res.success || !res.room) {
            return Swal.fire({
              icon: "error",
              title: "Lỗi",
              text: res.message || "Không tìm thấy phòng!",
            });
          }

          const room = res.room;

          const { value: formValues } = await Swal.fire({
            title: "Chỉnh sửa thông tin phòng",
            html: `
        <div class="text-start">
          <div class="row">
            <div class="col-md-6 mb-3">
              <label class="form-label"><strong>Tên phòng:</strong></label>
              <input id="swal-name" class="form-control" value="${
                room.type_name || ""
              }" placeholder="Tên phòng">
            </div>
            <div class="col-md-6 mb-3">
              <label class="form-label"><strong>Giá/đêm (VND):</strong></label>
              <input id="swal-price" type="number" class="form-control" value="${
                room.price_per_night || ""
              }" min="0">
            </div>
          </div>
          <div class="mb-3">
            <label class="form-label"><strong>Mô tả:</strong></label>
            <textarea id="swal-description" class="form-control" rows="3" placeholder="Mô tả phòng">${
              room.description || ""
            }</textarea>
          </div>
          <div class="row">
            <div class="col-md-4 mb-3">
              <label class="form-label"><strong>Số phòng ngủ:</strong></label>
              <input id="swal-bedroom" type="number" class="form-control" value="${
                room.bedroom_count || 1
              }" min="1">
            </div>
            <div class="col-md-4 mb-3">
              <label class="form-label"><strong>Số phòng tắm:</strong></label>
              <input id="swal-toilet" type="number" class="form-control" value="${
                room.toilet_count || 1
              }" min="1">
            </div>
            <div class="col-md-4 mb-3">
              <label class="form-label"><strong>Tối thiểu người lớn:</strong></label>
              <input id="swal-min-adults" type="number" class="form-control" value="${
                room.min_adults || 1
              }" min="1">
            </div>
          </div>
          <div class="row">
            <div class="col-md-4 mb-3">
              <label class="form-label"><strong>Tối đa người lớn:</strong></label>
              <input id="swal-max-adults" type="number" class="form-control" value="${
                room.max_adults || 2
              }" min="1">
            </div>
            <div class="col-md-4 mb-3">
              <label class="form-label"><strong>Tối đa trẻ em:</strong></label>
              <input id="swal-max-children" type="number" class="form-control" value="${
                room.max_children || 2
              }" min="0">
            </div>
            <div class="col-md-4 mb-3">
              <label class="form-label"><strong>Tối đa tổng số người:</strong></label>
              <input id="swal-max-guests" type="number" class="form-control" value="${
                room.max_guests || 4
              }" min="1">
            </div>
          </div>
        </div>
      `,
            focusConfirm: false,
            showCancelButton: true,
            confirmButtonText: "Lưu thay đổi",
            cancelButtonText: "Hủy",
            width: "800px",
            preConfirm: () => {
              const type_name = document
                .getElementById("swal-name")
                .value.trim();
              const description = document
                .getElementById("swal-description")
                .value.trim();
              const price_per_night = parseFloat(
                document.getElementById("swal-price").value
              );
              const bedroom_count = parseInt(
                document.getElementById("swal-bedroom").value
              );
              const toilet_count = parseInt(
                document.getElementById("swal-toilet").value
              );
              const min_adults = parseInt(
                document.getElementById("swal-min-adults").value
              );
              const max_adults = parseInt(
                document.getElementById("swal-max-adults").value
              );
              const max_children = parseInt(
                document.getElementById("swal-max-children").value
              );
              const max_guests = parseInt(
                document.getElementById("swal-max-guests").value
              );

              if (!type_name || !price_per_night || price_per_night <= 0) {
                Swal.showValidationMessage(
                  "Tên phòng và giá hợp lệ không được để trống"
                );
                return false;
              }

              if (max_adults < min_adults) {
                Swal.showValidationMessage(
                  "Số người lớn tối đa phải >= số người lớn tối thiểu"
                );
                return false;
              }

              if (max_guests < max_adults + max_children) {
                Swal.showValidationMessage(
                  "Tổng số người tối đa phải >= (người lớn + trẻ em)"
                );
                return false;
              }

              return {
                type_name,
                description,
                price_per_night,
                bedroom_count,
                toilet_count,
                min_adults,
                max_adults,
                max_children,
                max_guests,
              };
            },
          });

          if (!formValues) return;

          const updateRes = await apiCall(`/admin/rooms/${id}`, {
            method: "PUT",
            body: JSON.stringify(formValues),
          });

          if (updateRes.success) {
            await Swal.fire({
              icon: "success",
              title: "Cập nhật thành công",
              text: updateRes.message || "Thông tin phòng đã được cập nhật!",
            });
            refreshRooms();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: updateRes.message || "Không thể cập nhật phòng.",
            });
          }
        } catch (error) {
          console.error("❌ Edit room error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      async function viewBooking(id) {
        try {
          const res = await apiCall(`/admin/bookings/${id}`);
          if (!res.success || !res.booking) {
            return Swal.fire({
              icon: "error",
              title: "Lỗi",
              text: res.message || "Không tìm thấy hóa đơn!",
            });
          }

          const b = res.booking;

          // ✅ THÊM hiển thị phương thức thanh toán
          let paymentMethodText = "";
          switch (b.payment_method) {
            case "vnpay":
              paymentMethodText = "VNPay";
              break;
            case "momo":
              paymentMethodText = "MoMo";
              break;
            case "cash":
              paymentMethodText = "Tiền mặt";
              break;
            default:
              paymentMethodText = b.payment_method || "Không xác định";
          }

          const info = `
      <strong>ID Hóa đơn:</strong> ${b.booking_id}<br>
      <strong>ID Tài khoản:</strong> ${b.user_id}<br>
      <strong>Tên tài khoản:</strong> ${b.User?.name || "Ẩn danh"}<br>
      <strong>Tên người đặt:</strong> ${b.name}<br>
      <strong>Ngày đặt:</strong> ${new Date(b.booking_date).toLocaleDateString(
        "vi-VN"
      )}<br>
      <strong>Ngày nhận:</strong> ${new Date(
        b.check_in_date
      ).toLocaleDateString("vi-VN")}<br>
      <strong>Ngày đi:</strong> ${new Date(b.check_out_date).toLocaleDateString(
        "vi-VN"
      )}<br>
      <strong>Người lớn:</strong> ${b.adults} - <strong>Trẻ em:</strong> ${
            b.children
          }<br>
      <strong>Tổng tiền:</strong> ${new Intl.NumberFormat("vi-VN").format(
        b.total_price
      )} VND<br>
      <strong>Phương thức thanh toán:</strong> ${paymentMethodText}<br>
      <strong>Trạng thái:</strong> ${
        b.payment_status === "paid"
          ? "Đã thanh toán"
          : b.payment_status === "pending"
          ? "Chờ thanh toán"
          : "Thất bại"
      }
    `;

          Swal.fire({
            title: "Thông tin hóa đơn",
            html: info,
            icon: "info",
            confirmButtonText: "Đóng",
          });
        } catch (error) {
          console.error("❌ Lỗi khi xem hóa đơn:", error);
          Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể lấy thông tin hóa đơn!",
          });
        }
      }

      function viewReview(id) {
        alert(`Xem đánh giá ID: ${id} - Chức năng này sẽ được phát triển`);
      }

      function showCreateUserModal() {
        // Reset form
        document.getElementById("createUserForm").reset();
        new bootstrap.Modal(document.getElementById("createUserModal")).show();
      }

      async function createUser() {
        try {
          const name = document.getElementById("createUserName").value.trim();
          const email = document.getElementById("createUserEmail").value.trim();
          const password = document.getElementById("createUserPassword").value;
          const phone = document.getElementById("createUserPhone").value.trim();
          const gender = document.getElementById("createUserGender").value;
          const dob = document.getElementById("createUserDob").value;
          const role = document.getElementById("createUserRole").value;

          // Validation
          if (!name || !email || !password || !role) {
            return Swal.fire({
              icon: "error",
              title: "Thiếu thông tin",
              text: "Vui lòng điền đầy đủ các trường bắt buộc!",
            });
          }

          if (password.length < 6) {
            return Swal.fire({
              icon: "error",
              title: "Mật khẩu không hợp lệ",
              text: "Mật khẩu phải có ít nhất 6 ký tự!",
            });
          }

          // Call API
          const userData = {
            name,
            email,
            password,
            phone: phone || null,
            gender: gender || null,
            dob: dob || null,
            role,
          };

          const response = await apiCall("/admin/users", {
            method: "POST",
            body: JSON.stringify(userData),
          });

          if (response.success) {
            // Đóng modal
            bootstrap.Modal.getInstance(
              document.getElementById("createUserModal")
            ).hide();

            // Hiển thị thông báo thành công
            await Swal.fire({
              icon: "success",
              title: "Thành công!",
              text: response.message || "Tạo tài khoản thành công!",
              timer: 2000,
              showConfirmButton: false,
            });

            // Refresh danh sách users
            refreshUsers();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: response.message || "Không thể tạo tài khoản!",
            });
          }
        } catch (error) {
          console.error("❌ Create user error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      // ✅ THÊM FUNCTIONS CHO BOOKING
      function showCreateBookingModal() {
        // Reset form
        document.getElementById("createBookingForm").reset();

        // Set ngày mặc định
        const today = new Date().toISOString().split("T")[0];
        document.getElementById("createBookingDate").value = today;

        // Reset room select
        document.getElementById("createBookingRoom").innerHTML =
          '<option value="">-- Chọn homestay trước --</option>';
        document.getElementById("createBookingRoom").disabled = true;

        // Clear info texts
        document.getElementById("roomInfoText").textContent = "";
        document.getElementById("adultsLimitText").textContent = "";
        document.getElementById("childrenLimitText").textContent = "";
        document.getElementById("priceBreakdown").textContent = "";

        // Load users và homestays
        loadUsersForBooking();
        loadHomestaysForBooking();

        new bootstrap.Modal(
          document.getElementById("createBookingModal")
        ).show();
        // Setup event listeners
        const homestaySelect = document.getElementById("createBookingHomestay");
        const roomSelect = document.getElementById("createBookingRoom");

        if (homestaySelect) {
          homestaySelect.removeEventListener("change", loadRoomsForHomestay);
          homestaySelect.addEventListener("change", loadRoomsForHomestay);
        }

        if (roomSelect) {
          roomSelect.removeEventListener("change", updateRoomInfo);
          roomSelect.addEventListener("change", updateRoomInfo);
        }
      }

      async function loadUsersForBooking() {
        try {
          const response = await apiCall("/admin/bookings/users");
          const userSelect = document.getElementById("createBookingUser");

          if (response.success) {
            userSelect.innerHTML =
              '<option value="">-- Chọn người dùng --</option>';
            response.users.forEach((user) => {
              userSelect.innerHTML += `<option value="${user.user_id}">${user.name} (${user.email})</option>`;
            });
          }
        } catch (error) {
          console.error("❌ Lỗi load users:", error);
        }
      }

      async function loadHomestaysForBooking() {
        try {
          console.log("🔄 Loading homestays..."); // ✅ THÊM LOG DEBUG

          const response = await apiCall("/admin/bookings/homestays");
          console.log("📥 API Response:", response); // ✅ THÊM LOG DEBUG

          const homestaySelect = document.getElementById(
            "createBookingHomestay"
          );

          if (response.success && response.homestays) {
            homestaySelect.innerHTML =
              '<option value="">-- Chọn homestay --</option>';

            if (response.homestays.length === 0) {
              homestaySelect.innerHTML +=
                '<option value="" disabled>Không có homestay nào</option>';
              console.log("⚠️ Không có homestay nào trong database");
              return;
            }

            response.homestays.forEach((homestay) => {
              const priceText =
                homestay.total_price_per_night > 0
                  ? `${new Intl.NumberFormat("vi-VN").format(
                      homestay.total_price_per_night
                    )} VND/đêm`
                  : "Chưa có giá";

              homestaySelect.innerHTML += `<option value="${homestay.homestay_id}" data-price="${homestay.total_price_per_night}" data-rooms="${homestay.room_count}">${homestay.name} - ${homestay.address} (${homestay.room_count} phòng, ${priceText})</option>`;
            });

            console.log("✅ Loaded", response.homestays.length, "homestays");
          } else {
            homestaySelect.innerHTML =
              '<option value="" disabled>Lỗi tải dữ liệu</option>';
            console.error("❌ API không trả về homestays:", response);
          }
        } catch (error) {
          console.error("❌ Lỗi load homestays:", error);
          const homestaySelect = document.getElementById(
            "createBookingHomestay"
          );
          homestaySelect.innerHTML =
            '<option value="" disabled>Lỗi kết nối</option>';
        }
      }

      async function loadRoomsForHomestay() {
        const homestayId = document.getElementById(
          "createBookingHomestay"
        ).value;
        const roomSelect = document.getElementById("createBookingRoom");
        if (!roomSelect.value) {
          return Swal.fire({
            icon: "error",
            title: "Thiếu thông tin",
            text: "Vui lòng chọn loại phòng!",
          });
        }
        const roomInfoText = document.getElementById("roomInfoText");

        roomSelect.innerHTML =
          '<option value="">-- Đang tải danh sách phòng --</option>';
        roomSelect.disabled = true;

        if (!homestayId) {
          roomSelect.innerHTML =
            '<option value="">-- Chọn homestay trước --</option>';
          return;
        }

        try {
          const res = await fetch(
            `/admin/bookings/homestays/${homestayId}/rooms`
          );
          const data = await res.json();

          if (data.success) {
            roomSelect.innerHTML =
              '<option value="">-- Chọn loại phòng --</option>';
            data.rooms.forEach((room) => {
              const option = document.createElement("option");
              option.value = room.room_type_id;
              option.textContent = `${room.type_name} - ${
                room.max_guests
              } khách - ${room.price_per_night.toLocaleString()} VND`;
              option.dataset.price = room.price_per_night;
              option.dataset.maxGuests = room.max_guests;
              option.dataset.description = room.description;
              roomSelect.appendChild(option);
            });
            roomSelect.disabled = false;
          } else {
            roomSelect.innerHTML =
              '<option value="">-- Không có phòng --</option>';
          }
        } catch (error) {
          console.error("❌ Lỗi khi gọi API phòng:", error);
          roomSelect.innerHTML =
            '<option value="">-- Lỗi khi tải danh sách --</option>';
        }
      }

      function calculateTotal() {
        const homestaySelect = document.getElementById("createBookingHomestay");
        const checkinDate = document.getElementById(
          "createBookingCheckin"
        ).value;
        const checkoutDate = document.getElementById(
          "createBookingCheckout"
        ).value;
        const priceInput = document.getElementById("createBookingPrice");

        if (homestaySelect.value && checkinDate && checkoutDate) {
          const selectedOption =
            homestaySelect.options[homestaySelect.selectedIndex];
          const pricePerNight = parseFloat(selectedOption.dataset.price);

          const checkin = new Date(checkinDate);
          const checkout = new Date(checkoutDate);
          const nights = Math.ceil(
            (checkout - checkin) / (1000 * 60 * 60 * 24)
          );

          if (nights > 0) {
            const totalPrice = pricePerNight * nights;
            priceInput.value = totalPrice;
          }
        }
      }

      async function createBooking() {
        console.log("🔄 Bắt đầu tạo booking..."); // THÊM
        try {
          const user_id = document.getElementById("createBookingUser").value;
          const homestay_id = document.getElementById(
            "createBookingHomestay"
          ).value;
          const room_type_id =
            document.getElementById("createBookingRoom").value; // ✅ THÊM LẠI
          const name = document
            .getElementById("createBookingName")
            .value.trim();
          const booking_date =
            document.getElementById("createBookingDate").value;
          const check_in_date = document.getElementById(
            "createBookingCheckin"
          ).value;
          const check_out_date = document.getElementById(
            "createBookingCheckout"
          ).value;
          const adults = document.getElementById("createBookingAdults").value;
          const children = document.getElementById(
            "createBookingChildren"
          ).value;
          const total_price =
            document.getElementById("createBookingPrice").value;
          const guest_email = document
            .getElementById("createBookingEmail")
            .value.trim();
          const guest_phone = document
            .getElementById("createBookingPhone")
            .value.trim();
          const guest_address = document
            .getElementById("createBookingAddress")
            .value.trim();
          const payment_method = document.getElementById(
            "createBookingPaymentMethod"
          ).value;
          const payment_status = document.getElementById(
            "createBookingPaymentStatus"
          ).value;
          console.log("📝 Data:", { user_id, room_type_id }); // THÊM
          // Validation
          if (
            !user_id ||
            !homestay_id ||
            !room_type_id ||
            !name ||
            !booking_date ||
            !check_in_date ||
            !check_out_date ||
            !adults ||
            !total_price
          ) {
            return Swal.fire({
              icon: "error",
              title: "Thiếu thông tin",
              text: "Vui lòng điền đầy đủ các trường bắt buộc!",
            });
          }

          // Validation ngày
          const checkinDate = new Date(check_in_date);
          const checkoutDate = new Date(check_out_date);

          if (checkinDate >= checkoutDate) {
            return Swal.fire({
              icon: "error",
              title: "Ngày không hợp lệ",
              text: "Ngày trả phòng phải sau ngày nhận phòng!",
            });
          }

          // Call API
          const bookingData = {
            user_id: parseInt(user_id),
            homestay_id: parseInt(homestay_id),
            room_type_id: parseInt(room_type_id), // ✅ THÊM LẠI
            name,
            booking_date,
            check_in_date,
            check_out_date,
            adults: parseInt(adults),
            children: parseInt(children),
            total_price: parseFloat(total_price),
            guest_email: guest_email || null,
            guest_phone: guest_phone || null,
            guest_address: guest_address || null,
            payment_method,
            payment_status,
          };

          const response = await apiCall("/admin/bookings", {
            method: "POST",
            body: JSON.stringify(bookingData),
          });
          console.log("📥 API Response:", response); // THÊM
          if (response.success) {
            // Đóng modal
            bootstrap.Modal.getInstance(
              document.getElementById("createBookingModal")
            ).hide();

            // Hiển thị thông báo thành công với thông tin giá
            let message = response.message || "Tạo hóa đơn thành công!";
            if (response.pricing) {
              message += `\n\nChi tiết giá:\n- ${
                response.pricing.nights
              } đêm × ${new Intl.NumberFormat("vi-VN").format(
                response.pricing.roomPrice
              )} VND = ${new Intl.NumberFormat("vi-VN").format(
                response.pricing.baseAmount
              )} VND`;
              if (response.pricing.totalSurcharge > 0) {
                message += `\n- Phụ thu: ${new Intl.NumberFormat(
                  "vi-VN"
                ).format(response.pricing.totalSurcharge)} VND`;
              }
              message += `\n- Tổng cộng: ${new Intl.NumberFormat(
                "vi-VN"
              ).format(response.pricing.totalAmount)} VND`;
            }

            await Swal.fire({
              icon: "success",
              title: "Thành công!",
              text: message,
              timer: 3000,
              showConfirmButton: true,
            });

            // Refresh danh sách bookings
            refreshBookings();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: response.message || "Không thể tạo hóa đơn!",
            });
          }
        } catch (error) {
          console.error("❌ Create booking error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      // ✅ THÊM FUNCTIONS CHO EDIT BOOKING
      async function editBooking(bookingId) {
        try {
          // Load data cho dropdowns
          await loadUsersForEdit();
          await loadHomestaysForEdit();

          // Load thông tin booking
          const response = await apiCall(`/admin/bookings/${bookingId}/edit`);

          if (response.success && response.booking) {
            const booking = response.booking;

            // Set booking ID
            document.getElementById("editBookingId").value = booking.booking_id;

            // Set form values
            document.getElementById("editBookingUser").value = booking.user_id;
            document.getElementById("editBookingHomestay").value =
              booking.homestay_id;
            document.getElementById("editBookingName").value = booking.name;
            document.getElementById("editBookingDate").value =
              booking.booking_date.split("T")[0];
            document.getElementById("editBookingCheckin").value =
              booking.check_in_date.split("T")[0];
            document.getElementById("editBookingCheckout").value =
              booking.check_out_date.split("T")[0];
            document.getElementById("editBookingAdults").value = booking.adults;
            document.getElementById("editBookingChildren").value =
              booking.children;
            document.getElementById("editBookingPrice").value =
              booking.total_price;
            document.getElementById("editBookingEmail").value =
              booking.guest_email || "";
            document.getElementById("editBookingPhone").value =
              booking.guest_phone || "";
            document.getElementById("editBookingAddress").value =
              booking.guest_address || "";
            document.getElementById("editBookingPaymentMethod").value =
              booking.payment_method;
            document.getElementById("editBookingPaymentStatus").value =
              booking.payment_status;

            // THÊM sau khi set form values
            document.getElementById("editBookingRoom").value =
              booking.room_type_id;
            await loadRoomsForEditHomestay();
            // Set lại room sau khi load xong
            setTimeout(() => {
              document.getElementById("editBookingRoom").value =
                booking.room_type_id;
              updateEditRoomInfo();
            }, 500);
            // Show modal
            new bootstrap.Modal(
              document.getElementById("editBookingModal")
            ).show();
          } else {
            Swal.fire({
              icon: "error",
              title: "Lỗi",
              text: "Không thể tải thông tin hóa đơn!",
            });
          }
        } catch (error) {
          console.error("❌ Edit booking error:", error);
          Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      async function loadUsersForEdit() {
        try {
          const response = await apiCall("/admin/bookings/users");
          const userSelect = document.getElementById("editBookingUser");

          if (response.success) {
            userSelect.innerHTML =
              '<option value="">-- Chọn người dùng --</option>';
            response.users.forEach((user) => {
              userSelect.innerHTML += `<option value="${user.user_id}">${user.name} (${user.email})</option>`;
            });
          }
        } catch (error) {
          console.error("❌ Lỗi load users for edit:", error);
        }
      }

      async function loadHomestaysForEdit() {
        try {
          const response = await apiCall("/admin/bookings/homestays");
          const homestaySelect = document.getElementById("editBookingHomestay");

          if (response.success) {
            homestaySelect.innerHTML =
              '<option value="">-- Chọn homestay --</option>';
            response.homestays.forEach((homestay) => {
              const priceText =
                homestay.total_price_per_night > 0
                  ? `${new Intl.NumberFormat("vi-VN").format(
                      homestay.total_price_per_night
                    )} VND/đêm`
                  : "Chưa có giá";

              homestaySelect.innerHTML += `<option value="${homestay.homestay_id}" data-price="${homestay.total_price_per_night}" data-rooms="${homestay.room_count}">${homestay.name} - ${homestay.address} (${homestay.room_count} phòng, ${priceText})</option>`;
            });
          }
        } catch (error) {
          console.error("❌ Lỗi load homestays for edit:", error);
        }
      }

      function updateEditHomestayPrice() {
        calculateEditTotal();
      }

      function calculateEditTotal() {
        const homestaySelect = document.getElementById("editBookingHomestay");
        const checkinDate = document.getElementById("editBookingCheckin").value;
        const checkoutDate = document.getElementById(
          "editBookingCheckout"
        ).value;
        const priceInput = document.getElementById("editBookingPrice");

        if (homestaySelect.value && checkinDate && checkoutDate) {
          const selectedOption =
            homestaySelect.options[homestaySelect.selectedIndex];
          const pricePerNight = parseFloat(selectedOption.dataset.price);

          const checkin = new Date(checkinDate);
          const checkout = new Date(checkoutDate);
          const nights = Math.ceil(
            (checkout - checkin) / (1000 * 60 * 60 * 24)
          );

          if (nights > 0) {
            const totalPrice = pricePerNight * nights;
            priceInput.value = totalPrice;
          }
        }
      }

      async function updateBooking() {
        try {
          const bookingId = document.getElementById("editBookingId").value;
          const user_id = document.getElementById("editBookingUser").value;
          const homestay_id = document.getElementById(
            "editBookingHomestay"
          ).value;
          const name = document.getElementById("editBookingName").value.trim();
          const booking_date = document.getElementById("editBookingDate").value;
          const check_in_date =
            document.getElementById("editBookingCheckin").value;
          const check_out_date = document.getElementById(
            "editBookingCheckout"
          ).value;
          const adults = document.getElementById("editBookingAdults").value;
          const children = document.getElementById("editBookingChildren").value;
          const total_price = document.getElementById("editBookingPrice").value;
          const guest_email = document
            .getElementById("editBookingEmail")
            .value.trim();
          const guest_phone = document
            .getElementById("editBookingPhone")
            .value.trim();
          const guest_address = document
            .getElementById("editBookingAddress")
            .value.trim();
          const payment_method = document.getElementById(
            "editBookingPaymentMethod"
          ).value;
          const payment_status = document.getElementById(
            "editBookingPaymentStatus"
          ).value;

          // Validation
          if (
            !user_id ||
            !homestay_id ||
            !name ||
            !booking_date ||
            !check_in_date ||
            !check_out_date ||
            !adults ||
            !total_price
          ) {
            return Swal.fire({
              icon: "error",
              title: "Thiếu thông tin",
              text: "Vui lòng điền đầy đủ các trường bắt buộc!",
            });
          }

          // Validation ngày
          const checkinDate = new Date(check_in_date);
          const checkoutDate = new Date(check_out_date);

          if (checkinDate >= checkoutDate) {
            return Swal.fire({
              icon: "error",
              title: "Ngày không hợp lệ",
              text: "Ngày trả phòng phải sau ngày nhận phòng!",
            });
          }

          // Call API
          const bookingData = {
            user_id: parseInt(user_id),
            homestay_id: parseInt(homestay_id),
            name,
            booking_date,
            check_in_date,
            check_out_date,
            adults: parseInt(adults),
            children: parseInt(children),
            total_price: parseFloat(total_price),
            guest_email: guest_email || null,
            guest_phone: guest_phone || null,
            guest_address: guest_address || null,
            payment_method,
            payment_status,
          };

          const response = await apiCall(`/admin/bookings/${bookingId}`, {
            method: "PUT",
            body: JSON.stringify(bookingData),
          });

          if (response.success) {
            // Đóng modal
            bootstrap.Modal.getInstance(
              document.getElementById("editBookingModal")
            ).hide();

            // Hiển thị thông báo thành công
            await Swal.fire({
              icon: "success",
              title: "Thành công!",
              text: response.message || "Cập nhật hóa đơn thành công!",
              timer: 2000,
              showConfirmButton: false,
            });

            // Refresh danh sách bookings
            refreshBookings();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: response.message || "Không thể cập nhật hóa đơn!",
            });
          }
        } catch (error) {
          console.error("❌ Update booking error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }
      const calculateRoomPricing = (
        roomPrice,
        checkinDate,
        checkoutDate,
        adults,
        children
      ) => {
        const nights = Math.ceil(
          (checkoutDate - checkinDate) / (1000 * 3600 * 24)
        );
        const baseAmount = roomPrice * nights;

        const surchargePerNight = adults > 5 ? (adults - 5) * 100000 : 0;
        const totalSurcharge = surchargePerNight * nights;

        const totalAmount = baseAmount + totalSurcharge;

        return {
          nights,
          roomPrice,
          baseAmount,
          adults,
          children,
          totalGuests: adults + children,
          surchargeAdults: adults > 5 ? adults - 5 : 0,
          surchargePerNight,
          totalSurcharge,
          totalAmount,
        };
      };

      // ✅ SỬA FUNCTION LOAD ROOMS THEO HOMESTAY
      async function loadRoomsForHomestay() {
        const homestayId = document.getElementById(
          "createBookingHomestay"
        ).value;
        const roomSelect = document.getElementById("createBookingRoom");
        const roomInfoText = document.getElementById("roomInfoText");

        if (!homestayId) {
          roomSelect.innerHTML =
            '<option value="">-- Chọn homestay trước --</option>';
          roomSelect.disabled = true;
          roomInfoText.textContent = "";
          return;
        }

        try {
          const response = await apiCall(
            `/admin/bookings/homestays/${homestayId}/rooms`
          );

          if (response.success) {
            roomSelect.innerHTML =
              '<option value="">-- Chọn loại phòng --</option>';
            response.rooms.forEach((room) => {
              roomSelect.innerHTML += `<option value="${room.room_type_id}" 
          data-price="${room.price_per_night}"
          data-max-adults="${room.max_adults}"
          data-max-children="${room.max_children}"
          data-max-guests="${room.max_guests}">
          ${room.type_name} - ${new Intl.NumberFormat("vi-VN").format(
                room.price_per_night
              )} VND/đêm (Tối đa: ${room.max_adults} người lớn, ${
                room.max_children
              } trẻ em)
        </option>`;
            });
            roomSelect.disabled = false;
            roomInfoText.textContent =
              "Chọn loại phòng để xem thông tin chi tiết";
          }
        } catch (error) {
          console.error("❌ Lỗi load rooms:", error);
          roomSelect.innerHTML =
            '<option value="">-- Lỗi tải dữ liệu --</option>';
          roomInfoText.textContent = "Lỗi tải danh sách phòng";
        }
      }
      // ✅ FUNCTION CẬP NHẬT THÔNG TIN PHÒNG
      function updateRoomInfo() {
        const roomSelect = document.getElementById("createBookingRoom");
        const roomInfoText = document.getElementById("roomInfoText");
        const adultsLimitText = document.getElementById("adultsLimitText");
        const childrenLimitText = document.getElementById("childrenLimitText");

        if (roomSelect.value) {
          const selectedOption = roomSelect.options[roomSelect.selectedIndex];
          const maxAdults = selectedOption.dataset.maxAdults;
          const maxChildren = selectedOption.dataset.maxChildren;
          const maxGuests = selectedOption.dataset.maxGuests;

          roomInfoText.textContent = `Sức chứa: ${maxGuests} người (${maxAdults} người lớn, ${maxChildren} trẻ em)`;
          adultsLimitText.textContent = `Tối đa: ${maxAdults} người`;
          childrenLimitText.textContent = `Tối đa: ${maxChildren} trẻ`;

          // Reset số người
          document.getElementById("createBookingAdults").max = maxAdults;
          document.getElementById("createBookingChildren").max = maxChildren;

          validateGuestsAndCalculate();
        } else {
          roomInfoText.textContent = "";
          adultsLimitText.textContent = "";
          childrenLimitText.textContent = "";
        }
      }

      // ✅ FUNCTION VALIDATE VÀ TÍNH GIÁ
      function validateGuestsAndCalculate() {
        const roomSelect = document.getElementById("createBookingRoom");
        const adultsInput = document.getElementById("createBookingAdults");
        const childrenInput = document.getElementById("createBookingChildren");
        const checkinInput = document.getElementById("createBookingCheckin");
        const checkoutInput = document.getElementById("createBookingCheckout");
        const priceInput = document.getElementById("createBookingPrice");
        const priceBreakdown = document.getElementById("priceBreakdown");

        if (!roomSelect.value || !checkinInput.value || !checkoutInput.value) {
          priceInput.value = "";
          priceBreakdown.textContent = "";
          return;
        }

        const selectedOption = roomSelect.options[roomSelect.selectedIndex];
        const maxAdults = parseInt(selectedOption.dataset.maxAdults);
        const maxChildren = parseInt(selectedOption.dataset.maxChildren);
        const maxGuests = parseInt(selectedOption.dataset.maxGuests);

        const adults = parseInt(adultsInput.value) || 0;
        const children = parseInt(childrenInput.value) || 0;
        const totalGuests = adults + children;

        // Validate
        let errors = [];
        if (adults > maxAdults) {
          errors.push(`Số người lớn vượt quá ${maxAdults}`);
          adultsInput.classList.add("is-invalid");
        } else {
          adultsInput.classList.remove("is-invalid");
        }

        if (children > maxChildren) {
          errors.push(`Số trẻ em vượt quá ${maxChildren}`);
          childrenInput.classList.add("is-invalid");
        } else {
          childrenInput.classList.remove("is-invalid");
        }

        if (totalGuests > maxGuests) {
          errors.push(`Tổng số người vượt quá ${maxGuests}`);
        }

        if (errors.length > 0) {
          priceBreakdown.innerHTML = `<span class="text-danger">${errors.join(
            ", "
          )}</span>`;
          priceInput.value = "";
          return;
        }

        // Tính giá
        const checkinDate = new Date(checkinInput.value);
        const checkoutDate = new Date(checkoutInput.value);

        if (checkinDate >= checkoutDate) {
          priceBreakdown.innerHTML =
            '<span class="text-danger">Ngày check-out phải sau ngày check-in</span>';
          priceInput.value = "";
          return;
        }

        const pricing = calculateRoomPricing(
          parseFloat(selectedOption.dataset.price),
          checkinDate,
          checkoutDate,
          adults,
          children
        );

        priceInput.value = pricing.totalAmount;

        let breakdown = `${pricing.nights} đêm × ${new Intl.NumberFormat(
          "vi-VN"
        ).format(pricing.roomPrice)} VND = ${new Intl.NumberFormat(
          "vi-VN"
        ).format(pricing.baseAmount)} VND`;

        if (pricing.surchargeAdults > 0) {
          breakdown += `<br>Phụ thu ${
            pricing.surchargeAdults
          } người × ${new Intl.NumberFormat("vi-VN").format(
            pricing.surchargePerNight
          )} VND/đêm × ${pricing.nights} đêm = ${new Intl.NumberFormat(
            "vi-VN"
          ).format(pricing.totalSurcharge)} VND`;
        }

        priceBreakdown.innerHTML = breakdown;
      }
      async function loadRoomsForEditHomestay() {
        const homestayId = document.getElementById("editBookingHomestay").value;
        const roomSelect = document.getElementById("editBookingRoom");
        const roomInfoText = document.getElementById("editRoomInfoText");

        if (!homestayId) {
          roomSelect.innerHTML =
            '<option value="">-- Chọn homestay trước --</option>';
          roomSelect.disabled = true;
          roomInfoText.textContent = "";
          return;
        }

        try {
          roomSelect.innerHTML =
            '<option value="">-- Đang tải danh sách phòng --</option>';
          roomSelect.disabled = true;

          const response = await apiCall(
            `/admin/bookings/homestays/${homestayId}/rooms`
          );

          if (response.success && response.rooms && response.rooms.length > 0) {
            roomSelect.innerHTML =
              '<option value="">-- Chọn loại phòng --</option>';
            response.rooms.forEach((room) => {
              roomSelect.innerHTML += `<option value="${room.room_type_id}" 
          data-price="${room.price_per_night}"
          data-max-adults="${room.max_adults}"
          data-max-children="${room.max_children}"
          data-max-guests="${room.max_guests}">
          ${room.type_name} - ${new Intl.NumberFormat("vi-VN").format(
                room.price_per_night
              )} VND/đêm (Tối đa: ${room.max_adults} người lớn, ${
                room.max_children
              } trẻ em)
        </option>`;
            });
            roomSelect.disabled = false;
            roomInfoText.textContent =
              "Chọn loại phòng để xem thông tin chi tiết";
          } else {
            roomSelect.innerHTML =
              '<option value="">-- Không có phòng --</option>';
            roomInfoText.textContent = "Homestay này chưa có phòng nào";
          }
        } catch (error) {
          console.error("❌ Lỗi load rooms for edit:", error);
          roomSelect.innerHTML =
            '<option value="">-- Lỗi tải dữ liệu --</option>';
          roomInfoText.textContent = "Lỗi tải danh sách phòng";
        }
      }
      function updateEditRoomInfo() {
        const roomSelect = document.getElementById("editBookingRoom");
        const roomInfoText = document.getElementById("editRoomInfoText");
        const adultsLimitText = document.getElementById("editAdultsLimitText");
        const childrenLimitText = document.getElementById(
          "editChildrenLimitText"
        );

        if (roomSelect.value) {
          const selectedOption = roomSelect.options[roomSelect.selectedIndex];
          const maxAdults = selectedOption.dataset.maxAdults;
          const maxChildren = selectedOption.dataset.maxChildren;
          const maxGuests = selectedOption.dataset.maxGuests;

          roomInfoText.textContent = `Sức chứa: ${maxGuests} người (${maxAdults} người lớn, ${maxChildren} trẻ em)`;
          adultsLimitText.textContent = `Tối đa: ${maxAdults} người`;
          childrenLimitText.textContent = `Tối đa: ${maxChildren} trẻ`;

          // Set limits
          document.getElementById("editBookingAdults").max = maxAdults;
          document.getElementById("editBookingChildren").max = maxChildren;

          validateEditGuestsAndCalculate();
        } else {
          roomInfoText.textContent = "";
          adultsLimitText.textContent = "";
          childrenLimitText.textContent = "";
        }
      }

      function validateEditGuestsAndCalculate() {
        const roomSelect = document.getElementById("editBookingRoom");
        const adultsInput = document.getElementById("editBookingAdults");
        const childrenInput = document.getElementById("editBookingChildren");
        const checkinInput = document.getElementById("editBookingCheckin");
        const checkoutInput = document.getElementById("editBookingCheckout");
        const priceInput = document.getElementById("editBookingPrice");
        const priceBreakdown = document.getElementById("editPriceBreakdown");

        if (!roomSelect.value || !checkinInput.value || !checkoutInput.value) {
          priceInput.value = "";
          priceBreakdown.textContent = "";
          return;
        }

        const selectedOption = roomSelect.options[roomSelect.selectedIndex];
        const maxAdults = parseInt(selectedOption.dataset.maxAdults);
        const maxChildren = parseInt(selectedOption.dataset.maxChildren);
        const maxGuests = parseInt(selectedOption.dataset.maxGuests);

        const adults = parseInt(adultsInput.value) || 0;
        const children = parseInt(childrenInput.value) || 0;
        const totalGuests = adults + children;

        // Validate
        let errors = [];
        if (adults > maxAdults) {
          errors.push(`Số người lớn vượt quá ${maxAdults}`);
          adultsInput.classList.add("is-invalid");
        } else {
          adultsInput.classList.remove("is-invalid");
        }

        if (children > maxChildren) {
          errors.push(`Số trẻ em vượt quá ${maxChildren}`);
          childrenInput.classList.add("is-invalid");
        } else {
          childrenInput.classList.remove("is-invalid");
        }

        if (totalGuests > maxGuests) {
          errors.push(`Tổng số người vượt quá ${maxGuests}`);
        }

        if (errors.length > 0) {
          priceBreakdown.innerHTML = `<span class="text-danger">${errors.join(
            ", "
          )}</span>`;
          priceInput.value = "";
          return;
        }

        // Tính giá
        const checkinDate = new Date(checkinInput.value);
        const checkoutDate = new Date(checkoutInput.value);

        if (checkinDate >= checkoutDate) {
          priceBreakdown.innerHTML =
            '<span class="text-danger">Ngày check-out phải sau ngày check-in</span>';
          priceInput.value = "";
          return;
        }

        const pricing = calculateRoomPricing(
          parseFloat(selectedOption.dataset.price),
          checkinDate,
          checkoutDate,
          adults,
          children
        );

        priceInput.value = pricing.totalAmount;

        let breakdown = `${pricing.nights} đêm × ${new Intl.NumberFormat(
          "vi-VN"
        ).format(pricing.roomPrice)} VND = ${new Intl.NumberFormat(
          "vi-VN"
        ).format(pricing.baseAmount)} VND`;

        if (pricing.surchargeAdults > 0) {
          breakdown += `<br>Phụ thu ${
            pricing.surchargeAdults
          } người × ${new Intl.NumberFormat("vi-VN").format(
            pricing.surchargePerNight
          )} VND/đêm × ${pricing.nights} đêm = ${new Intl.NumberFormat(
            "vi-VN"
          ).format(pricing.totalSurcharge)} VND`;
        }

        priceBreakdown.innerHTML = breakdown;
      }
      async function updateBooking() {
        try {
          const bookingId = document.getElementById("editBookingId").value;
          const user_id = document.getElementById("editBookingUser").value;
          const homestay_id = document.getElementById(
            "editBookingHomestay"
          ).value;
          const room_type_id = document.getElementById("editBookingRoom").value; // THÊM
          const name = document.getElementById("editBookingName").value.trim();
          const booking_date = document.getElementById("editBookingDate").value;
          const check_in_date =
            document.getElementById("editBookingCheckin").value;
          const check_out_date = document.getElementById(
            "editBookingCheckout"
          ).value;
          const adults = document.getElementById("editBookingAdults").value;
          const children = document.getElementById("editBookingChildren").value;
          const total_price = document.getElementById("editBookingPrice").value;
          const guest_email = document
            .getElementById("editBookingEmail")
            .value.trim();
          const guest_phone = document
            .getElementById("editBookingPhone")
            .value.trim();
          const guest_address = document
            .getElementById("editBookingAddress")
            .value.trim();
          const payment_method = document.getElementById(
            "editBookingPaymentMethod"
          ).value;
          const payment_status = document.getElementById(
            "editBookingPaymentStatus"
          ).value;

          // Validation
          if (
            !user_id ||
            !homestay_id ||
            !room_type_id ||
            !name ||
            !booking_date ||
            !check_in_date ||
            !check_out_date ||
            !adults ||
            !total_price
          ) {
            return Swal.fire({
              icon: "error",
              title: "Thiếu thông tin",
              text: "Vui lòng điền đầy đủ các trường bắt buộc!",
            });
          }

          // Validation ngày
          const checkinDate = new Date(check_in_date);
          const checkoutDate = new Date(check_out_date);

          if (checkinDate >= checkoutDate) {
            return Swal.fire({
              icon: "error",
              title: "Ngày không hợp lệ",
              text: "Ngày trả phòng phải sau ngày nhận phòng!",
            });
          }

          // Call API
          const bookingData = {
            user_id: parseInt(user_id),
            homestay_id: parseInt(homestay_id),
            room_type_id: parseInt(room_type_id), // THÊM
            name,
            booking_date,
            check_in_date,
            check_out_date,
            adults: parseInt(adults),
            children: parseInt(children) || 0,
            total_price: parseFloat(total_price),
            guest_email: guest_email || null,
            guest_phone: guest_phone || null,
            guest_address: guest_address || null,
            payment_method,
            payment_status,
          };

          const response = await apiCall(`/admin/bookings/${bookingId}`, {
            method: "PUT",
            body: JSON.stringify(bookingData),
          });

          if (response.success) {
            // Đóng modal
            bootstrap.Modal.getInstance(
              document.getElementById("editBookingModal")
            ).hide();

            // Hiển thị thông báo thành công
            await Swal.fire({
              icon: "success",
              title: "Thành công!",
              text: response.message || "Cập nhật hóa đơn thành công!",
              timer: 2000,
              showConfirmButton: false,
            });

            // Refresh danh sách bookings
            refreshBookings();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: response.message || "Không thể cập nhật hóa đơn!",
            });
          }
        } catch (error) {
          console.error("❌ Update booking error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      // ===== HOMESTAY CREATE/DELETE FUNCTIONS =====
      function showCreateHomestayModal() {
        // Reset form
        document.getElementById("createHomestayForm").reset();
        new bootstrap.Modal(
          document.getElementById("createHomestayModal")
        ).show();
      }

      async function createHomestay() {
        try {
          const name = document
            .getElementById("createHomestayName")
            .value.trim();
          const description = document
            .getElementById("createHomestayDescription")
            .value.trim();
          const address = document
            .getElementById("createHomestayAddress")
            .value.trim();
          const thumbnail_url = document
            .getElementById("createHomestayThumbnail")
            .value.trim();

          // Validation
          if (!name || !description || !address) {
            return Swal.fire({
              icon: "error",
              title: "Thiếu thông tin",
              text: "Vui lòng điền đầy đủ các trường bắt buộc!",
            });
          }

          const homestayData = {
            name,
            description,
            address,
            thumbnail_url: thumbnail_url || "",
          };

          const response = await apiCall("/admin/homestays", {
            method: "POST",
            body: JSON.stringify(homestayData),
          });

          if (response.success) {
            // Đóng modal
            bootstrap.Modal.getInstance(
              document.getElementById("createHomestayModal")
            ).hide();

            // Hiển thị thông báo thành công
            await Swal.fire({
              icon: "success",
              title: "Thành công!",
              text: response.message || "Tạo homestay thành công!",
              timer: 2000,
              showConfirmButton: false,
            });

            // Refresh danh sách homestays
            refreshHomestays();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: response.message || "Không thể tạo homestay!",
            });
          }
        } catch (error) {
          console.error("❌ Create homestay error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      async function deleteHomestay(homestayId) {
        try {
          // Xác nhận trước khi xóa
          const result = await Swal.fire({
            title: "Bạn có chắc chắn?",
            html: `
        <p>Bạn muốn xóa homestay này?</p>
        <div class="alert alert-warning mt-3">
          <i class="fas fa-exclamation-triangle me-2"></i>
          <strong>Cảnh báo:</strong> Việc này sẽ xóa TẤT CẢ dữ liệu liên quan:
          <ul class="mt-2 text-start">
            <li>Tất cả loại phòng của homestay</li>
            <li>Tất cả booking (trừ booking đang pending/paid trong tương lai)</li>
            <li>Tất cả đánh giá</li>
            <li>Tất cả hình ảnh phòng</li>
          </ul>
        </div>
      `,
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#6c757d",
            confirmButtonText: "Có, xóa homestay!",
            cancelButtonText: "Không, giữ lại",
            width: "600px",
          });

          if (!result.isConfirmed) return;

          // Loading state
          Swal.fire({
            title: "Đang xóa...",
            text: "Vui lòng đợi trong giây lát",
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => {
              Swal.showLoading();
            },
          });

          const response = await apiCall(`/admin/homestays/${homestayId}`, {
            method: "DELETE",
          });

          if (response.success) {
            // Thành công - hiển thị toast
            Toastify({
              text: "✅ Xóa homestay thành công!",
              duration: 3000,
              gravity: "top",
              position: "right",
              backgroundColor: "#28a745",
            }).showToast();

            // Đóng loading và refresh
            Swal.close();
            refreshHomestays();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Không thể xóa",
              text: response.message || "Có lỗi xảy ra khi xóa homestay!",
              confirmButtonColor: "#d33",
            });
          }
        } catch (error) {
          console.error("❌ Delete homestay error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
            confirmButtonColor: "#d33",
          });
        }
      }
      // ===== ROOM MANAGEMENT FUNCTIONS =====
      function showCreateRoomModal() {
        document.getElementById("createRoomForm").reset();
        loadHomestaysForRoom();
        new bootstrap.Modal(document.getElementById("createRoomModal")).show();
      }

      async function loadHomestaysForRoom() {
        try {
          const response = await apiCall("/admin/homestays/list");
          const homestaySelect = document.getElementById("createRoomHomestay");

          if (response.success) {
            homestaySelect.innerHTML =
              '<option value="">-- Chọn homestay --</option>';
            response.homestays.forEach((homestay) => {
              homestaySelect.innerHTML += `<option value="${homestay.homestay_id}">${homestay.name} - ${homestay.address}</option>`;
            });
          }
        } catch (error) {
          console.error("❌ Lỗi load homestays:", error);
        }
      }

      async function createRoom() {
        try {
          const homestay_id =
            document.getElementById("createRoomHomestay").value;
          const type_name = document
            .getElementById("createRoomName")
            .value.trim();
          const description = document
            .getElementById("createRoomDescription")
            .value.trim();
          const bedroom_count =
            document.getElementById("createRoomBedroom").value;
          const toilet_count =
            document.getElementById("createRoomToilet").value;
          const price_per_night =
            document.getElementById("createRoomPrice").value;
          const min_adults = document.getElementById(
            "createRoomMinAdults"
          ).value;
          const max_adults = document.getElementById(
            "createRoomMaxAdults"
          ).value;
          const max_children = document.getElementById(
            "createRoomMaxChildren"
          ).value;
          const max_guests = document.getElementById(
            "createRoomMaxGuests"
          ).value;
          const slug = document.getElementById("createRoomSlug").value.trim();

          // Validation
          if (!homestay_id || !type_name || !description || !price_per_night) {
            return Swal.fire({
              icon: "error",
              title: "Thiếu thông tin",
              text: "Vui lòng điền đầy đủ các trường bắt buộc!",
            });
          }

          const roomData = {
            homestay_id: parseInt(homestay_id),
            type_name,
            description,
            bedroom_count: parseInt(bedroom_count) || 1,
            toilet_count: parseInt(toilet_count) || 1,
            max_adults: parseInt(max_adults) || 2,
            max_children: parseInt(max_children) || 0,
            max_guests: parseInt(max_guests) || 2,
            min_adults: parseInt(min_adults) || 1,
            price_per_night: parseFloat(price_per_night),
            slug: slug || null,
          };

          const response = await apiCall("/admin/rooms", {
            method: "POST",
            body: JSON.stringify(roomData),
          });

          if (response.success) {
            bootstrap.Modal.getInstance(
              document.getElementById("createRoomModal")
            ).hide();

            await Swal.fire({
              icon: "success",
              title: "Thành công!",
              text: response.message || "Tạo phòng thành công!",
              timer: 2000,
              showConfirmButton: false,
            });

            refreshRooms();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: response.message || "Không thể tạo phòng!",
            });
          }
        } catch (error) {
          console.error("❌ Create room error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      async function deleteRoom(roomId) {
        try {
          const result = await Swal.fire({
            title: "Bạn có chắc chắn?",
            html: `
        <p>Bạn muốn xóa phòng này?</p>
        <div class="alert alert-warning mt-3">
          <strong>Cảnh báo:</strong> Việc này sẽ xóa:
          <ul class="mt-2 text-start">
            <li>Tất cả ảnh của phòng</li>
            <li>Tất cả dịch vụ của phòng</li>
            <li>Tất cả đánh giá</li>
            <li>Tất cả booking (trừ booking pending/paid trong tương lai)</li>
          </ul>
        </div>
      `,
            icon: "warning",
            showCancelButton: true,
            confirmButtonColor: "#d33",
            cancelButtonColor: "#6c757d",
            confirmButtonText: "Có, xóa phòng!",
            cancelButtonText: "Hủy",
            width: "600px",
          });

          if (!result.isConfirmed) return;

          const response = await apiCall(`/admin/rooms/${roomId}`, {
            method: "DELETE",
          });

          if (response.success) {
            Toastify({
              text: "✅ Xóa phòng thành công!",
              duration: 3000,
              gravity: "top",
              position: "right",
              backgroundColor: "#28a745",
            }).showToast();

            refreshRooms();
          } else {
            await Swal.fire({
              icon: "error",
              title: "Không thể xóa",
              text: response.message,
            });
          }
        } catch (error) {
          console.error("❌ Delete room error:", error);
          await Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể kết nối tới máy chủ!",
          });
        }
      }

      // ===== ROOM IMAGES MANAGEMENT =====
      async function manageRoomImages(roomId) {
        document.getElementById("currentRoomId").value = roomId;
        new bootstrap.Modal(
          document.getElementById("manageImagesModal")
        ).show();
        await loadRoomImages(roomId);
      }

      async function loadRoomImages(roomId) {
        try {
          const response = await apiCall(`/admin/rooms/${roomId}/images`);
          const container = document.getElementById("roomImagesContainer");

          if (response.success) {
            if (response.images.length === 0) {
              container.innerHTML =
                '<div class="text-center text-muted py-4">Chưa có ảnh nào</div>';
              return;
            }

            let html = '<div class="row">';
            response.images.forEach((image, index) => {
              const thumbnailBadge = image.is_thumbnail
                ? '<span class="badge bg-primary position-absolute top-0 start-0 m-1">Ảnh đại diện</span>'
                : "";

              html += `
          <div class="col-md-6 mb-3">
            <div class="card">
              <div class="position-relative">
                <img src="${
                  image.image_url
                }" class="card-img-top" style="height: 200px; object-fit: cover;" onerror="this.src='https://via.placeholder.com/300x200?text=Image+Not+Found'">
                ${thumbnailBadge}
              </div>
              <div class="card-body">
                <div class="d-flex justify-content-between align-items-center">
                  <small class="text-muted">ID: ${image.image_id}</small>
                  <div>
                    ${
                      !image.is_thumbnail
                        ? `<button class="btn btn-sm btn-outline-primary" onclick="setThumbnail(${image.image_id}, ${roomId})">Đặt làm đại diện</button>`
                        : ""
                    }
                    <button class="btn btn-sm btn-outline-danger" onclick="deleteRoomImage(${
                      image.image_id
                    }, ${roomId})">Xóa</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        `;
            });
            html += "</div>";

            container.innerHTML = html;
          }
        } catch (error) {
          console.error("❌ Load images error:", error);
          document.getElementById("roomImagesContainer").innerHTML =
            '<div class="alert alert-danger">Lỗi tải ảnh</div>';
        }
      }

      async function addRoomImage() {
        const roomId = document.getElementById("currentRoomId").value;
        const imageUrl = document.getElementById("newImageUrl").value.trim();

        if (!imageUrl) {
          return Swal.fire({
            icon: "error",
            title: "Thiếu thông tin",
            text: "Vui lòng nhập URL ảnh!",
          });
        }

        try {
          const response = await apiCall(`/admin/rooms/${roomId}/images`, {
            method: "POST",
            body: JSON.stringify({ image_url: imageUrl }),
          });

          if (response.success) {
            document.getElementById("newImageUrl").value = "";
            await loadRoomImages(roomId);

            Toastify({
              text: "✅ Thêm ảnh thành công!",
              duration: 3000,
              gravity: "top",
              position: "right",
              backgroundColor: "#28a745",
            }).showToast();
          } else {
            Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: response.message,
            });
          }
        } catch (error) {
          console.error("❌ Add image error:", error);
          Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể thêm ảnh!",
          });
        }
      }

      async function deleteRoomImage(imageId, roomId) {
        const result = await Swal.fire({
          title: "Xác nhận xóa ảnh?",
          text: "Bạn có chắc muốn xóa ảnh này?",
          icon: "warning",
          showCancelButton: true,
          confirmButtonColor: "#d33",
          cancelButtonColor: "#6c757d",
          confirmButtonText: "Xóa",
          cancelButtonText: "Hủy",
        });

        if (!result.isConfirmed) return;

        try {
          const response = await apiCall(`/admin/rooms/images/${imageId}`, {
            method: "DELETE",
          });

          if (response.success) {
            await loadRoomImages(roomId);

            Toastify({
              text: "✅ Xóa ảnh thành công!",
              duration: 3000,
              gravity: "top",
              position: "right",
              backgroundColor: "#28a745",
            }).showToast();
          } else {
            Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: response.message,
            });
          }
        } catch (error) {
          console.error("❌ Delete image error:", error);
        }
      }

      async function setThumbnail(imageId, roomId) {
        try {
          const response = await apiCall(`/admin/rooms/${roomId}/thumbnail`, {
            method: "PUT",
            body: JSON.stringify({ image_id: imageId }),
          });

          if (response.success) {
            await loadRoomImages(roomId);

            Toastify({
              text: "✅ Đặt ảnh đại diện thành công!",
              duration: 3000,
              gravity: "top",
              position: "right",
              backgroundColor: "#28a745",
            }).showToast();
          }
        } catch (error) {
          console.error("❌ Set thumbnail error:", error);
        }
      }

      // ===== ROOM SERVICES MANAGEMENT =====
      async function manageRoomServices(roomId) {
        document.getElementById("currentRoomIdServices").value = roomId;
        new bootstrap.Modal(
          document.getElementById("manageServicesModal")
        ).show();
        await loadRoomServices(roomId);
      }

      async function loadRoomServices(roomId) {
        try {
          const [roomServicesRes, allServicesRes] = await Promise.all([
            apiCall(`/admin/rooms/${roomId}/services`),
            apiCall("/admin/services"),
          ]);

          if (roomServicesRes.success && allServicesRes.success) {
            const roomServiceIds = roomServicesRes.services.map(
              (s) => s.service_id
            );
            const container = document.getElementById("roomServicesContainer");

            let html = '<div class="row">';
            allServicesRes.services.forEach((service) => {
              const isChecked = roomServiceIds.includes(service.service_id);

              html += `
          <div class="col-md-6 mb-2">
            <div class="form-check">
              <input class="form-check-input" type="checkbox" value="${
                service.service_id
              }" id="service${service.service_id}" ${
                isChecked ? "checked" : ""
              }>
              <label class="form-check-label" for="service${
                service.service_id
              }">
                ${service.service_name}
              </label>
            </div>
          </div>
        `;
            });
            html += "</div>";

            container.innerHTML = html;
          }
        } catch (error) {
          console.error("❌ Load services error:", error);
          document.getElementById("roomServicesContainer").innerHTML =
            '<div class="alert alert-danger">Lỗi tải dịch vụ</div>';
        }
      }

      async function saveRoomServices() {
        const roomId = document.getElementById("currentRoomIdServices").value;
        const checkboxes = document.querySelectorAll(
          '#roomServicesContainer input[type="checkbox"]'
        );
        const selectedServices = Array.from(checkboxes)
          .filter((cb) => cb.checked)
          .map((cb) => parseInt(cb.value));

        try {
          const response = await apiCall(`/admin/rooms/${roomId}/services`, {
            method: "PUT",
            body: JSON.stringify({ service_ids: selectedServices }),
          });

          if (response.success) {
            bootstrap.Modal.getInstance(
              document.getElementById("manageServicesModal")
            ).hide();

            Toastify({
              text: "✅ Cập nhật dịch vụ thành công!",
              duration: 3000,
              gravity: "top",
              position: "right",
              backgroundColor: "#28a745",
            }).showToast();
          } else {
            Swal.fire({
              icon: "error",
              title: "Thất bại",
              text: response.message,
            });
          }
        } catch (error) {
          console.error("❌ Save services error:", error);
          Swal.fire({
            icon: "error",
            title: "Lỗi hệ thống",
            text: "Không thể lưu dịch vụ!",
          });
        }
      }
    </script>
  </body>
</html>
