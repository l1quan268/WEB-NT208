const db = require("../models");

let handleChatQuery = async (req, res) => {
  const message = req.body.message.toLowerCase();
  const kbAnswer = req.body.kbAnswer || null; // Nh·∫≠n t·ª´ workflow

  // üîç Ki·ªÉm tra c√≥ c·∫ßn API kh√¥ng
  const needsAPI =
    /\d+\s*(ng∆∞·ªùi|kh√°ch|nguoi)|ph√≤ng.*tr·ªëng|l·ªãch.*ph√≤ng|ph√≤ng.*l·ªãch|h√¥m nay|today/.test(
      message
    );

  if (!needsAPI && kbAnswer) {
    return res.json({
      reply: kbAnswer,
    });
  }

  let apiReply = null;

  // üéØ Case 1: H·ªèi s·ªë ng∆∞·ªùi c·ª• th·ªÉ
  const match = message.match(/(\d+)\s*(ng∆∞·ªùi|kh√°ch|ng∆∞·ªùi|nguoi)/);
  if (message.includes("ph√≤ng") && match) {
    const guestCount = parseInt(match[1]);

    try {
      const [rooms] = await db.sequelize.query(
        `SELECT rt.type_name, rt.max_guests, rt.price_per_night, h.name as homestay_name
         FROM roomtypes rt
         JOIN homestays h ON rt.homestay_id = h.homestay_id  
         WHERE rt.max_guests >= :count 
         ORDER BY rt.price_per_night ASC`,
        { replacements: { count: guestCount } }
      );

      if (rooms.length > 0) {
        apiReply = `üîé C√≥ ${rooms.length} ph√≤ng ph√π h·ª£p cho ${guestCount} ng∆∞·ªùi:\n`;
        apiReply += rooms
          .map(
            (r) =>
              `‚Ä¢ **${r.type_name}** t·∫°i ${r.homestay_name}\n  üë• T·ªëi ƒëa ${
                r.max_guests
              } ng∆∞·ªùi - üí∞ ${r.price_per_night.toLocaleString()}ƒë/ƒë√™m`
          )
          .join("\n\n");
      } else {
        apiReply = `‚ùå Kh√¥ng c√≥ ph√≤ng n√†o ph√π h·ª£p cho ${guestCount} ng∆∞·ªùi.`;
      }
    } catch (err) {
      console.error("‚ùå SQL ERROR (guest count):", err);
      apiReply = "‚ö†Ô∏è L·ªói truy v·∫•n s·ªë ng∆∞·ªùi.";
    }
  }

  // üéØ Case 2: Ph√≤ng tr·ªëng h√¥m nay (∆∞u ti√™n cao nh·∫•t)
  else if (
    message.includes("tr·ªëng") &&
    (message.includes("h√¥m nay") || message.includes("today"))
  ) {
    try {
      const today = new Date().toISOString().split("T")[0];

      const [available] = await db.sequelize.query(
        `SELECT rt.type_name, rt.price_per_night, rt.max_guests, h.name as homestay_name
         FROM roomtypes rt
         JOIN homestays h ON rt.homestay_id = h.homestay_id
         WHERE rt.room_type_id NOT IN (
           SELECT DISTINCT room_type_id FROM bookings 
           WHERE :today BETWEEN check_in_date AND check_out_date
             AND status IN ('pending', 'completed')
         )
         ORDER BY rt.price_per_night ASC`,
        { replacements: { today } }
      );

      if (available.length > 0) {
        apiReply = `üü¢ **Ph√≤ng tr·ªëng h√¥m nay** (${today}):\n`;
        apiReply += available
          .map(
            (r) =>
              `‚Ä¢ **${r.type_name}** t·∫°i ${r.homestay_name}\n  üë• ${
                r.max_guests
              } ng∆∞·ªùi - üí∞ ${r.price_per_night.toLocaleString()}ƒë/ƒë√™m`
          )
          .join("\n\n");
      } else {
        apiReply = `‚ùå T·∫•t c·∫£ ph√≤ng ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t h√¥m nay (${today})`;
      }
    } catch (err) {
      console.error("‚ùå SQL ERROR (today availability):", err);
      apiReply = "‚ö†Ô∏è L·ªói truy v·∫•n ph√≤ng tr·ªëng.";
    }
  }

  // üéØ Case 3: H·ªèi l·ªãch ph√≤ng c·ª• th·ªÉ (∆∞u ti√™n cao nh·∫•t trong else)
  else {
    let roomMatch =
      message.match(
        /(?:l·ªãch|ph√≤ng)\s+(?:c·ªßa\s+)?([a-z0-9\s\-]+?)(?:\s+(?:c√≤n|tr·ªëng|l·ªãch|ng√†y)|$)/i
      ) || message.match(/l·ªãch(?: c·ªßa)?\s+([a-z0-9\s\-]+)/i);

    if (roomMatch && roomMatch[1]) {
      const rawName = roomMatch[1].trim().replace(/\s+/g, " ");

      try {
        // T√¨m ph√≤ng theo t√™n (search c·∫£ type_name v√† homestay name)
        const [rooms] = await db.sequelize.query(
          `SELECT rt.room_type_id, rt.type_name, h.name as homestay_name
           FROM roomtypes rt
           JOIN homestays h ON rt.homestay_id = h.homestay_id
           WHERE LOWER(rt.type_name) LIKE :name 
              OR LOWER(h.name) LIKE :name
           LIMIT 1`,
          { replacements: { name: `%${rawName.toLowerCase()}%` } }
        );

        if (rooms.length > 0) {
          const room = rooms[0];

          // L·∫•y T·∫§T C·∫¢ l·ªãch ƒë·∫∑t ph√≤ng (c·∫£ past v√† future ƒë·ªÉ show full calendar)
          const [booked] = await db.sequelize.query(
            `SELECT check_in_date, check_out_date, status, name as guest_name
             FROM bookings 
             WHERE room_type_id = :id 
               AND status IN ('pending', 'completed')
             ORDER BY check_in_date DESC
             LIMIT 10`,
            { replacements: { id: room.room_type_id } }
          );

          if (booked.length === 0) {
            apiReply = `‚úÖ **${room.type_name}** t·∫°i ${room.homestay_name} ch∆∞a c√≥ booking n√†o!\n\n`;
            apiReply += `üí° **B·∫°n c√≥ th·ªÉ ƒë·∫∑t b·∫•t k·ª≥ ng√†y n√†o t·ª´ h√¥m nay tr·ªü ƒëi.**`;
          } else {
            // Hi·ªÉn th·ªã l·ªãch ƒë·∫ßy ƒë·ªß
            apiReply = `üìÖ **${room.type_name}** t·∫°i ${room.homestay_name} - L·ªãch ƒë·∫∑t ph√≤ng:\n`;

            // Ph√¢n lo·∫°i booking theo th·ªùi gian
            const today = new Date().toISOString().split("T")[0];
            const futureBookings = [];
            const pastBookings = [];

            booked.forEach((b) => {
              if (b.check_out_date >= today) {
                futureBookings.push(b);
              } else {
                pastBookings.push(b);
              }
            });

            // Hi·ªÉn th·ªã future bookings tr∆∞·ªõc
            if (futureBookings.length > 0) {
              apiReply += `\nüîÆ **L·ªãch s·∫Øp t·ªõi:**\n`;
              futureBookings.forEach((b) => {
                apiReply += `‚Ä¢ ${b.check_in_date} ‚Üí ${b.check_out_date} (${
                  b.status === "pending" ? "Ch·ªù x√°c nh·∫≠n" : "ƒê√£ x√°c nh·∫≠n"
                })\n`;
              });
            }

            // Hi·ªÉn th·ªã past bookings
            if (pastBookings.length > 0) {
              apiReply += `\nüìú **L·ªãch ƒë√£ qua (${pastBookings.length} booking g·∫ßn nh·∫•t):**\n`;
              pastBookings.slice(0, 5).forEach((b) => {
                apiReply += `‚Ä¢ ${b.check_in_date} ‚Üí ${b.check_out_date} (ƒê√£ ho√†n th√†nh)\n`;
              });
            }

            // ƒê·ªÅ xu·∫•t ng√†y tr·ªëng th√¥ng minh (ch·ªâ d·ª±a tr√™n future bookings)
            const suggestions = [];

            if (futureBookings.length === 0) {
              // Kh√¥ng c√≥ booking t∆∞∆°ng lai
              suggestions.push(
                `‚Ä¢ **T·ª´ h√¥m nay (${today}) tr·ªü ƒëi** - Ho√†n to√†n tr·ªëng!`
              );
            } else {
              // S·∫Øp x·∫øp future bookings theo ng√†y
              futureBookings.sort(
                (a, b) => new Date(a.check_in_date) - new Date(b.check_in_date)
              );

              // 1. Ki·ªÉm tra t·ª´ h√¥m nay ƒë·∫øn booking ƒë·∫ßu ti√™n
              const firstBooking = new Date(futureBookings[0].check_in_date);
              const todayDate = new Date(today);

              if (firstBooking > todayDate) {
                const daysDiff = Math.ceil(
                  (firstBooking - todayDate) / (1000 * 60 * 60 * 24)
                );
                if (daysDiff > 0) {
                  const endDate = new Date(firstBooking);
                  endDate.setDate(endDate.getDate() - 1);
                  suggestions.push(
                    `‚Ä¢ **${today}** ƒë·∫øn **${
                      endDate.toISOString().split("T")[0]
                    }** (${daysDiff} ng√†y)`
                  );
                }
              }

              // 2. Ki·ªÉm tra kho·∫£ng tr·ªëng gi·ªØa c√°c future bookings
              for (let i = 0; i < futureBookings.length - 1; i++) {
                const currentCheckOut = new Date(
                  futureBookings[i].check_out_date
                );
                const nextCheckIn = new Date(
                  futureBookings[i + 1].check_in_date
                );
                const gapDays = Math.ceil(
                  (nextCheckIn - currentCheckOut) / (1000 * 60 * 60 * 24)
                );

                if (gapDays > 1) {
                  const fromDate = new Date(currentCheckOut);
                  fromDate.setDate(fromDate.getDate() + 1);
                  const toDate = new Date(nextCheckIn);
                  toDate.setDate(toDate.getDate() - 1);

                  const availableDays = gapDays - 1;
                  if (availableDays > 0) {
                    suggestions.push(
                      `‚Ä¢ **${fromDate.toISOString().split("T")[0]}** ƒë·∫øn **${
                        toDate.toISOString().split("T")[0]
                      }** (${availableDays} ng√†y)`
                    );
                  }
                }
              }

              // 3. Sau booking cu·ªëi c√πng
              const lastBooking = futureBookings[futureBookings.length - 1];
              const lastCheckOut = new Date(lastBooking.check_out_date);
              const nextAvailable = new Date(lastCheckOut);
              nextAvailable.setDate(nextAvailable.getDate() + 1);
              suggestions.push(
                `‚Ä¢ **T·ª´ ${nextAvailable.toISOString().split("T")[0]} tr·ªü ƒëi**`
              );
            }

            // Th√™m ƒë·ªÅ xu·∫•t v√†o response
            if (suggestions.length > 0) {
              apiReply += `\n\nüí° **C√≥ th·ªÉ ƒë·∫∑t:**\n`;
              apiReply += suggestions.join("\n");
            }
          }
        } else {
          apiReply = `‚ùå Kh√¥ng t√¨m th·∫•y ph√≤ng c√≥ t√™n "${rawName}". C√≥ th·ªÉ b·∫°n mu·ªën t√¨m:\n`;

          // G·ª£i √Ω ph√≤ng t∆∞∆°ng t·ª±
          const [suggestions] = await db.sequelize.query(
            `SELECT rt.type_name, h.name as homestay_name
             FROM roomtypes rt
             JOIN homestays h ON rt.homestay_id = h.homestay_id
             LIMIT 5`
          );

          apiReply += suggestions
            .map((s) => `‚Ä¢ **${s.type_name}** t·∫°i ${s.homestay_name}`)
            .join("\n");
        }
      } catch (err) {
        console.error("‚ùå SQL ERROR (room name):", err);
        apiReply = "‚ö†Ô∏è L·ªói truy v·∫•n l·ªãch ph√≤ng.";
      }
    }

    // üéØ Case 4: T√¨m ph√≤ng tr·ªëng n√≥i chung (ch·ªâ khi KH√îNG c√≥ "l·ªãch" v√† KH√îNG c√≥ "h√¥m nay")
    else if (
      message.includes("ph√≤ng") &&
      message.includes("tr·ªëng") &&
      !message.includes("h√¥m nay") &&
      !message.includes("today") &&
      !message.includes("l·ªãch") // ‚≠ê KEY FIX: Th√™m condition n√†y
    ) {
      try {
        const [available] = await db.sequelize.query(
          `SELECT rt.type_name, rt.max_guests, rt.price_per_night, h.name as homestay_name
           FROM roomtypes rt
           JOIN homestays h ON rt.homestay_id = h.homestay_id
           ORDER BY rt.price_per_night ASC
           LIMIT 10`
        );

        apiReply = `üìã **Danh s√°ch ph√≤ng c√≥ s·∫µn:**\n`;
        apiReply += available
          .map(
            (r) =>
              `‚Ä¢ **${r.type_name}** t·∫°i ${r.homestay_name}\n  üë• ${
                r.max_guests
              } ng∆∞·ªùi - üí∞ ${r.price_per_night.toLocaleString()}ƒë/ƒë√™m`
          )
          .join("\n\n");
        apiReply += `\n\nüí° ƒê·ªÉ ki·ªÉm tra l·ªãch tr·ªëng c·ª• th·ªÉ, h·ªèi: "l·ªãch ph√≤ng [t√™n ph√≤ng]"`;
      } catch (err) {
        console.error("‚ùå SQL ERROR (all rooms):", err);
        apiReply = "‚ö†Ô∏è L·ªói truy v·∫•n danh s√°ch ph√≤ng.";
      }
    }

    // üéØ Case 5: H·ªèi v·ªÅ homestay c·ª• th·ªÉ
    else if (
      message.includes("homestay") ||
      message.includes("villa") ||
      message.includes("house")
    ) {
      const homestayMatch = message.match(
        /([a-z0-9\s\-]+(?:villa|house|homestay|view|paradise|breeze|nest|retreat|haven|chic|lagoon|stay|garden|home|aurora|corner|berkley|hut|beautiful))/i
      );

      if (homestayMatch) {
        const homestayName = homestayMatch[1].trim();

        try {
          const [homestayRooms] = await db.sequelize.query(
            `SELECT rt.type_name, rt.max_guests, rt.price_per_night, h.name as homestay_name
             FROM roomtypes rt
             JOIN homestays h ON rt.homestay_id = h.homestay_id
             WHERE LOWER(h.name) LIKE :name
             ORDER BY rt.price_per_night ASC`,
            { replacements: { name: `%${homestayName.toLowerCase()}%` } }
          );

          if (homestayRooms.length > 0) {
            const homestayName = homestayRooms[0].homestay_name;
            apiReply = `üè† **${homestayName}** c√≥ ${homestayRooms.length} lo·∫°i ph√≤ng:\n`;
            apiReply += homestayRooms
              .map(
                (r) =>
                  `‚Ä¢ **${r.type_name}** - ${
                    r.max_guests
                  } ng∆∞·ªùi - ${r.price_per_night.toLocaleString()}ƒë/ƒë√™m`
              )
              .join("\n");
          } else {
            apiReply = `‚ùå Kh√¥ng t√¨m th·∫•y homestay "${homestayName}"`;
          }
        } catch (err) {
          console.error("‚ùå SQL ERROR (homestay):", err);
          apiReply = "‚ö†Ô∏è L·ªói truy v·∫•n homestay.";
        }
      }
    }
  }

  // üîó Merge KB + API responses
  let finalReply = "";
  if (kbAnswer && apiReply) {
    finalReply = `${kbAnswer}\n\nüìä **Th√¥ng tin chi ti·∫øt:**\n${apiReply}`;
  } else if (apiReply) {
    finalReply = apiReply;
  } else {
    finalReply = "Xin l·ªói, t√¥i ch∆∞a hi·ªÉu c√¢u h·ªèi c·ªßa b·∫°n.";
  }

  return res.json({ reply: finalReply });
};

module.exports = { handleChatQuery };
